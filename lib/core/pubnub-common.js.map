{"version":3,"sources":["core/pubnub-common.js"],"names":[],"mappings":"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","file":"core/pubnub-common.js","sourcesContent":["/* @flow */\n\nimport Networking from './components/networking';\nimport Config from './components/config';\nimport Crypto from './components/cryptography/index';\nimport SubscriptionManager from './components/subscription_manager';\n\nimport packageJSON from '../../package.json';\n\n/*\nimport PresenceHeartbeat from './iterators/presence_heartbeat';\nimport Subscriber from './iterators/subscriber';\n*/\n\nimport TimeEndpoint from './endpoints/time';\nimport PresenceEndpoints from './endpoints/presence';\nimport HistoryEndpoint from './endpoints/history';\nimport PushEndpoint from './endpoints/push';\nimport AccessEndpoints from './endpoints/access';\nimport ChannelGroupEndpoints from './endpoints/channel_groups';\nimport SubscribeEndpoints from './endpoints/subscribe';\nimport PublishEndpoints from './endpoints/publish';\n\nimport { internalSetupStruct } from './flow_interfaces';\n\nexport default class {\n\n  _config: Config;\n  _crypto: Crypto;\n  _networking: Networking;\n\n  // tell flow about the mounted endpoint\n  time: Function;\n  publish: Function;\n  history: Function;\n\n  listAllChannelGroups: Function;\n  listChannelsForChannelGroup: Function;\n  addChannelsToChannelGroup: Function;\n  removeChannelsFromChannelGroup: Function;\n  deleteChannelGroup: Function;\n  //\n  addPushNotificationsOnChannels: Function;\n  removePushNotificationsFromChannels: Function;\n  removeAllPushNotificationsFromDeviceWithPushToken: Function;\n  auditPushChannelProvisions: Function;\n  //\n  grant: Function;\n  audit: Function;\n  //\n  setCipherKey: Function;\n\n  constructor(setup: internalSetupStruct) {\n    let { sendBeacon, db } = setup;\n\n    this._config = new Config({ setup, db });\n    this._crypto = new Crypto({ config: this._config });\n    this._networking = new Networking({ config: this._config, crypto: this._crypto, sendBeacon });\n\n    const subscribeEndpoints = new SubscribeEndpoints({ networking: this._networking, config: this._config });\n    const presenceEndpoints = new PresenceEndpoints({ networking: this._networking, config: this._config });\n    const timeEndpoint = new TimeEndpoint({ networking: this._networking, config: this._config });\n    const pushEndpoints = new PushEndpoint({ networking: this._networking, config: this._config });\n    const channelGroupEndpoints = new ChannelGroupEndpoints({ networking: this._networking, config: this._config });\n    const publishEndpoints = new PublishEndpoints({ networking: this._networking, config: this._config, crypto: this._crypto });\n    const historyEndpoint = new HistoryEndpoint({ networking: this._networking, config: this._config, crypto: this._crypto });\n    const accessEndpoints = new AccessEndpoints({ config: this._config, networking: this._networking, crypto: this._crypto });\n\n    const subscriptionManager = new SubscriptionManager({ subscribeEndpoints, config: this._config, presenceEndpoints });\n\n    // mount up the endpoints\n    /** channel groups **/\n    this.listAllChannelGroups = channelGroupEndpoints.listGroups.bind(channelGroupEndpoints);\n    this.listChannelsForChannelGroup = channelGroupEndpoints.listChannels.bind(channelGroupEndpoints);\n    this.addChannelsToChannelGroup = channelGroupEndpoints.addChannels.bind(channelGroupEndpoints);\n    this.removeChannelsFromChannelGroup = channelGroupEndpoints.removeChannels.bind(channelGroupEndpoints);\n    this.deleteChannelGroup = channelGroupEndpoints.deleteGroup.bind(channelGroupEndpoints);\n    /** push **/\n    this.addPushNotificationsOnChannels = pushEndpoints.addDeviceToPushChannels.bind(pushEndpoints);\n    this.removePushNotificationsFromChannels = pushEndpoints.removeDeviceFromPushChannels.bind(pushEndpoints);\n    this.removeAllPushNotificationsFromDeviceWithPushToken = pushEndpoints.removeDevice.bind(pushEndpoints);\n    this.auditPushChannelProvisions = pushEndpoints.listChannelsForDevice.bind(pushEndpoints);\n    /** presence **/\n    this.hereNow = presenceEndpoints.hereNow.bind(presenceEndpoints);\n    this.whereNow = presenceEndpoints.whereNow.bind(presenceEndpoints);\n    this.getState = presenceEndpoints.getState.bind(presenceEndpoints);\n    this.setState = subscriptionManager.adaptStateChange.bind(subscriptionManager);\n    /** PAM **/\n    this.grant = accessEndpoints.grant.bind(accessEndpoints);\n    this.audit = accessEndpoints.audit.bind(accessEndpoints);\n\n    this.publish = publishEndpoints.publish.bind(publishEndpoints);\n    this.history = historyEndpoint.fetch.bind(historyEndpoint);\n    this.time = timeEndpoint.fetch.bind(timeEndpoint);\n\n    // subscription related methods\n    this.subscribe = subscriptionManager.adaptSubscribeChange.bind(subscriptionManager);\n    this.unsubscribe = subscriptionManager.adaptUnsubscribeChange.bind(subscriptionManager);\n    this.reconnect = subscriptionManager.reconnect.bind(subscriptionManager);\n\n    this.stop = subscriptionManager.disconnect.bind(subscriptionManager);\n    this.reconnect = subscriptionManager.reconnect.bind(SubscriptionManager);\n\n    this.addListener = subscriptionManager.addListener.bind(subscriptionManager);\n    this.removeListener = subscriptionManager.removeListener.bind(subscriptionManager);\n    /** config **/\n    this.setCipherKey = this._config.setCipherKey.bind(this._config);\n    this.getUUID = this._config.getUUID.bind(this._config);\n    this.setUUID = this._config.setUUID.bind(this._config);\n  }\n\n\n  getVersion(): String { return packageJSON.version; }\n\n}\n"],"sourceRoot":"/source/"}