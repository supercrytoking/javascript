{"version":3,"sources":["core/endpoints/presence/get_state.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QAMA,M,GAAA,M;QAOA,a,GAAA,a;QAWA,c,GAAA,c;;AA9BhB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,qBAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AAAA,MAChC,MADgC,GACrB,OADqB,CAChC,MADgC;;;AAGtC,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,cAAzB,EAAoE;AAAA,MACnE,MADmE,GACxD,OADwD,CACnE,MADmE;AAAA,6BAE7B,cAF6B,CAEnE,IAFmE;AAAA,MAEnE,IAFmE,wCAE5D,OAAO,IAFqD;AAAA,8BAE7B,cAF6B,CAE/C,QAF+C;AAAA,MAE/C,QAF+C,yCAEpC,EAFoC;;AAGzE,MAAI,sBAAsB,SAAS,MAAT,GAAkB,CAAlB,GAAsB,SAAS,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,SAAO,0BAA0B,OAAO,YAAjC,GAAgD,WAAhD,GAA8D,mBAA9D,GAAoF,QAApF,GAA+F,IAAtG;AACD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,EAAgC,cAAhC,EAA2E;AAAA,+BACnD,cADmD,CAC1E,aAD0E;AAAA,MAC1E,aAD0E,0CAC1D,EAD0D;;AAEhF,MAAM,SAAS,EAAf;;AAEA,MAAI,cAAc,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,WAAO,eAAP,IAA0B,mBAAmB,cAAc,IAAd,CAAmB,GAAnB,CAAnB,CAA1B;AACD;;AAED,SAAO,MAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC,cAAjC,EAAyD,cAAzD,EAA8G;AAAA,+BACvE,cADuE,CAC7G,QAD6G;AAAA,MAC7G,QAD6G,0CAClG,EADkG;AAAA,+BACvE,cADuE,CAC9F,aAD8F;AAAA,MAC9F,aAD8F,0CAC9E,EAD8E;;AAEnH,MAAI,mBAAmB,EAAvB;;AAEA,MAAI,SAAS,MAAT,KAAoB,CAApB,IAAyB,cAAc,MAAd,KAAyB,CAAtD,EAAyD;AACvD,qBAAiB,SAAS,CAAT,CAAjB,IAAgC,eAAe,OAA/C;AACD,GAFD,MAEO;AACL,uBAAmB,eAAe,OAAlC;AACD;;AAED,SAAO,EAAE,UAAU,gBAAZ,EAAP;AACD","file":"core/endpoints/presence/get_state.js","sourcesContent":["/* @flow */\n\nimport { GetStateArguments, GetStateResponse } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNGetStateOperation';\n}\n\nexport function validateParams(modules) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules, incomingParams: GetStateArguments): string {\n  let { config } = modules;\n  let { uuid = config.UUID, channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return '/v2/presence/sub-key/' + config.subscribeKey + '/channel/' + stringifiedChannels + '/uuid/' + uuid;\n}\n\nexport function prepareParams(modules, incomingParams: GetStateArguments): Object {\n  let { channelGroups = [] } = incomingParams;\n  const params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules, serverResponse: Object, incomingParams: GetStateArguments): GetStateResponse {\n  let { channels = [], channelGroups = [] } = incomingParams;\n  let channelsResponse = {};\n\n  if (channels.length === 1 && channelGroups.length === 0) {\n    channelsResponse[channels[0]] = serverResponse.payload;\n  } else {\n    channelsResponse = serverResponse.payload;\n  }\n\n  return { channels: channelsResponse };\n}\n"],"sourceRoot":"/source/"}