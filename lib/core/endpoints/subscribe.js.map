{"version":3,"sources":["core/endpoints/subscribe.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNSubscribeOperation","modules","config","subscribeKey","incomingParams","channels","stringifiedChannels","length","join","utils","encodeString","getSubscribeTimeout","channelGroups","timetoken","filterExpression","region","params","heartbeat","getPresenceTimeout","tt","tr","serverResponse","messages","m","forEach","rawMessage","publishMetaData","publishTimetoken","p","t","r","parsedMessage","shard","parseInt","a","subscriptionMatch","b","channel","c","payload","d","flags","f","issuingClientId","i","k","originationTimetoken","o","userMetadata","u","push","metadata"],"mappings":"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","file":"subscribe.js","sourcesContent":["/* @flow */\n\nimport { SubscribeArguments, PublishMetaData, SubscribeMetadata, SubscribeMessage, SubscribeEnvelope, ModulesInject } from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNSubscribeOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: SubscribeArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/subscribe/${config.subscribeKey}/${utils.encodeString(stringifiedChannels)}/0`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getSubscribeTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams({ config }: ModulesInject, incomingParams: SubscribeArguments): Object {\n  let { channelGroups = [], timetoken, filterExpression, region } = incomingParams;\n  const params: Object = {\n    heartbeat: config.getPresenceTimeout()\n  };\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  if (filterExpression && filterExpression.length > 0) {\n    params['filter-expr'] = filterExpression;\n  }\n\n  if (timetoken) {\n    params.tt = timetoken;\n  }\n\n  if (region) {\n    params.tr = region;\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): SubscribeEnvelope {\n  const messages: Array<SubscribeMessage> = [];\n\n  serverResponse.m.forEach((rawMessage) => {\n    let publishMetaData: PublishMetaData = {\n      publishTimetoken: rawMessage.p.t,\n      region: rawMessage.p.r\n    };\n    let parsedMessage: SubscribeMessage = {\n      shard: parseInt(rawMessage.a, 10),\n      subscriptionMatch: rawMessage.b,\n      channel: rawMessage.c,\n      payload: rawMessage.d,\n      flags: rawMessage.f,\n      issuingClientId: rawMessage.i,\n      subscribeKey: rawMessage.k,\n      originationTimetoken: rawMessage.o,\n      userMetadata: rawMessage.u,\n      publishMetaData\n    };\n    messages.push(parsedMessage);\n  });\n\n  const metadata: SubscribeMetadata = {\n    timetoken: serverResponse.t.t,\n    region: serverResponse.t.r\n  };\n\n  return { messages, metadata };\n}\n"]}