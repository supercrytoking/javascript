{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_crypto","_channels","_presenceChannels","_heartbeatChannels","_heartbeatChannelGroups","_channelGroups","_presenceChannelGroups","_pendingChannelSubscriptions","_pendingChannelGroupSubscriptions","_currentTimetoken","_lastTimetoken","_storedTimetoken","_subscriptionStatusAnnounced","_isOnline","_reconnectionManager","ReconnectionManager","_dedupingManager","DedupingManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","connected","suppressLeaveEvents","status","announceStatus","reconnect","timetoken","withPresence","withHeartbeats","subscribeKey","console","log","push","isOffline","actualChannels","actualChannelGroups","length","affectedChannels","affectedChannelGroups","currentTimetoken","lastTimetoken","Object","keys","_region","stopPolling","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","getHeartbeatInterval","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","clearInterval","heartbeatChannels","getHeartbeatChannels","heartbeatChannelGroups","getHeartbeatChannelGroups","presenceState","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","autoNetworkDetection","disconnect","announceNetworkDown","announceSuccessfulHeartbeats","subscribeArgs","filterExpression","region","_subscribeCall","_processSubscribeResponse","payload","category","categoryConstants","PNTimeoutCategory","PNNetworkIssuesCategory","onReconnection","announceNetworkUp","reconnectedAnnounce","PNReconnectedCategory","operation","startPolling","PNBadRequestCategory","metadata","connectedAnnounce","PNConnectedCategory","subscribedChannels","messages","requestMessageCountThreshold","dedupeOnSubscribe","countAnnouncement","PNRequestMessageCountExceededCategory","message","subscriptionMatch","publishMetaData","isDuplicate","addEntry","utils","endsWith","announce","subscription","actualChannel","subscribedChannel","substring","lastIndexOf","action","data","publishTimetoken","occupancy","uuid","timestamp","join","leave","timeout","announcePresence","publisher","issuingClientId","userMetadata","cipherKey","decrypt","announceMessage","abort"],"mappings":"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","file":"subscription_manager.js","sourcesContent":["/* @flow */\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport DedupingManager from '../components/deduping_manager';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusAnnouncement, PresenceAnnouncement } from '../flow_interfaces';\nimport categoryConstants from '../constants/categories';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number,\n  withHeartbeats: ?boolean\n}\n\ntype PresenceArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  connected: boolean\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    leaveEndpoint: Function,\n    subscribeEndpoint: Function,\n    timeEndpoint: Function,\n    heartbeatEndpoint: Function,\n    setStateEndpoint: Function,\n    config: Config,\n    crypto: Crypto,\n    listenerManager: ListenerManager\n}\n\nexport default class {\n\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n\n  _leaveEndpoint: Function;\n  _heartbeatEndpoint: Function;\n  _setStateEndpoint: Function;\n  _subscribeEndpoint: Function;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _heartbeatChannels: Object;\n  _heartbeatChannelGroups: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _currentTimetoken: number;\n  _lastTimetoken: number;\n  _storedTimetoken: ?number;\n\n  _region: ?number;\n\n  _subscribeCall: ?Object;\n  _heartbeatTimer: ?number;\n\n  _subscriptionStatusAnnounced: boolean;\n\n  _autoNetworkDetection: boolean;\n  _isOnline: boolean;\n\n  // store pending connection elements\n  _pendingChannelSubscriptions: Array<string>;\n  _pendingChannelGroupSubscriptions: Array<string>;\n  //\n\n  _dedupingManager: DedupingManager;\n\n  constructor({ subscribeEndpoint, leaveEndpoint, heartbeatEndpoint, setStateEndpoint, timeEndpoint, config, crypto, listenerManager }: SubscriptionManagerConsturct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n\n    this._leaveEndpoint = leaveEndpoint;\n    this._heartbeatEndpoint = heartbeatEndpoint;\n    this._setStateEndpoint = setStateEndpoint;\n    this._subscribeEndpoint = subscribeEndpoint;\n\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._heartbeatChannels = {};\n    this._heartbeatChannelGroups = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._pendingChannelSubscriptions = [];\n    this._pendingChannelGroupSubscriptions = [];\n\n    this._currentTimetoken = 0;\n    this._lastTimetoken = 0;\n    this._storedTimetoken = null;\n\n    this._subscriptionStatusAnnounced = false;\n\n    this._isOnline = true;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\n    this._dedupingManager = new DedupingManager({ config });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    return this._setStateEndpoint({ state, channels, channelGroups }, callback);\n  }\n\n  adaptPresenceChange(args: PresenceArgs) {\n    const { connected, channels = [], channelGroups = [] } = args;\n\n    if (connected) {\n      channels.forEach((channel: string) => {\n        this._heartbeatChannels[channel] = { state: {} };\n      });\n\n      channelGroups.forEach((channelGroup: string) => {\n        this._heartbeatChannelGroups[channelGroup] = { state: {} };\n      });\n    } else {\n      channels.forEach((channel) => {\n        if (channel in this._heartbeatChannels) {\n          delete this._heartbeatChannels[channel];\n        }\n      });\n\n      channelGroups.forEach((channelGroup) => {\n        if (channelGroup in this._heartbeatChannelGroups) {\n          delete this._heartbeatChannelGroups[channelGroup];\n        }\n      });\n\n      if (this._config.suppressLeaveEvents === false) {\n        this._leaveEndpoint({ channels, channelGroups }, (status) => {\n          this._listenerManager.announceStatus(status);\n        });\n      }\n    }\n\n    this.reconnect();\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false, withHeartbeats = true } = args;\n\n    if (!this._config.subscribeKey || this._config.subscribeKey === '') {\n      if (console && console.log) console.log('subscribe key missing; aborting subscribe') //eslint-disable-line\n      return;\n    }\n\n    if (timetoken) {\n      this._lastTimetoken = this._currentTimetoken;\n      this._currentTimetoken = timetoken;\n    }\n\n    // reset the current timetoken to get a connect event.\n    if (this._currentTimetoken !== '0' && this._currentTimetoken !== 0) {\n      this._storedTimetoken = this._currentTimetoken;\n      this._currentTimetoken = 0;\n    }\n\n    channels.forEach((channel: string) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n      if (withHeartbeats) this._heartbeatChannels[channel] = {};\n\n      this._pendingChannelSubscriptions.push(channel);\n    });\n\n    channelGroups.forEach((channelGroup: string) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n      if (withHeartbeats) this._heartbeatChannelGroups[channelGroup] = {};\n\n      this._pendingChannelGroupSubscriptions.push(channelGroup);\n    });\n\n    this._subscriptionStatusAnnounced = false;\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs, isOffline: boolean) {\n    const { channels = [], channelGroups = [] } = args;\n\n    // keep track of which channels and channel groups\n    // we are going to unsubscribe from.\n    const actualChannels = [];\n    const actualChannelGroups = [];\n    //\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) {\n        delete this._channels[channel];\n        actualChannels.push(channel);\n\n        if (channel in this._heartbeatChannels) {\n          delete this._heartbeatChannels[channel];\n        }\n      }\n      if (channel in this._presenceChannels) {\n        delete this._presenceChannels[channel];\n        actualChannels.push(channel);\n      }\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) {\n        delete this._channelGroups[channelGroup];\n        actualChannelGroups.push(channelGroup);\n\n        if (channelGroup in this._heartbeatChannelGroups) {\n          delete this._heartbeatChannelGroups[channelGroup];\n        }\n      }\n      if (channelGroup in this._presenceChannelGroups) {\n        delete this._channelGroups[channelGroup];\n        actualChannelGroups.push(channelGroup);\n      }\n    });\n\n    // no-op if there are no channels and cg's to unsubscribe from.\n    if (actualChannels.length === 0 && actualChannelGroups.length === 0) {\n      return;\n    }\n\n    if (this._config.suppressLeaveEvents === false && !isOffline) {\n      this._leaveEndpoint({ channels: actualChannels, channelGroups: actualChannelGroups }, (status) => {\n        status.affectedChannels = actualChannels;\n        status.affectedChannelGroups = actualChannelGroups;\n        status.currentTimetoken = this._currentTimetoken;\n        status.lastTimetoken = this._lastTimetoken;\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    // if we have nothing to subscribe to, reset the timetoken.\n    if (Object.keys(this._channels).length === 0 &&\n      Object.keys(this._presenceChannels).length === 0 &&\n      Object.keys(this._channelGroups).length === 0 &&\n      Object.keys(this._presenceChannelGroups).length === 0) {\n      this._lastTimetoken = 0;\n      this._currentTimetoken = 0;\n      this._storedTimetoken = null;\n      this._region = null;\n      this._reconnectionManager.stopPolling();\n    }\n\n    this.reconnect();\n  }\n\n  unsubscribeAll(isOffline: boolean) {\n    this.adaptUnsubscribeChange({ channels: this.getSubscribedChannels(), channelGroups: this.getSubscribedChannelGroups() }, isOffline);\n  }\n\n  getHeartbeatChannels(): Array<string> {\n    return Object.keys(this._heartbeatChannels);\n  }\n\n  getHeartbeatChannelGroups(): Array<string> {\n    return Object.keys(this._heartbeatChannelGroups);\n  }\n\n  getSubscribedChannels(): Array<string> {\n    return Object.keys(this._channels);\n  }\n\n  getSubscribedChannelGroups(): Array<string> {\n    return Object.keys(this._channelGroups);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n    this._reconnectionManager.stopPolling();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n\n    // if the interval is 0, do not queue up heartbeating\n    if (this._config.getHeartbeatInterval() === 0) {\n      return;\n    }\n\n    this._performHeartbeatLoop();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getHeartbeatInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    const heartbeatChannels = this.getHeartbeatChannels();\n\n    const heartbeatChannelGroups = this.getHeartbeatChannelGroups();\n\n    let presenceState = {};\n\n    if (heartbeatChannels.length === 0 && heartbeatChannelGroups.length === 0) {\n      return;\n    }\n\n    this.getSubscribedChannels().forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (Object.keys(channelState).length) presenceState[channel] = channelState;\n    });\n\n    this.getSubscribedChannelGroups().forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n      if (Object.keys(channelGroupState).length) presenceState[channelGroup] = channelGroupState;\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (status.error && this._config.autoNetworkDetection && this._isOnline) {\n        this._isOnline = false;\n        this.disconnect();\n        this._listenerManager.announceNetworkDown();\n        this.reconnect();\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._heartbeatEndpoint({\n      channels: heartbeatChannels,\n      channelGroups: heartbeatChannelGroups,\n      state: presenceState }, onHeartbeat.bind(this));\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach(channel => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach(channel => channels.push(`${channel}-pnpres`));\n\n    Object.keys(this._channelGroups).forEach(channelGroup => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach(channelGroup => channelGroups.push(`${channelGroup}-pnpres`));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      timetoken: this._currentTimetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    };\n\n    this._subscribeCall = this._subscribeEndpoint(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === categoryConstants.PNTimeoutCategory) {\n        this._startSubscribeLoop();\n      } else if (status.category === categoryConstants.PNNetworkIssuesCategory) {\n        // we lost internet connection, alert the reconnection manager and terminate all loops\n        this.disconnect();\n\n        if (status.error && this._config.autoNetworkDetection && this._isOnline) {\n          this._isOnline = false;\n          this._listenerManager.announceNetworkDown();\n        }\n\n        this._reconnectionManager.onReconnection(() => {\n          if (this._config.autoNetworkDetection && !this._isOnline) {\n            this._isOnline = true;\n            this._listenerManager.announceNetworkUp();\n          }\n          this.reconnect();\n          this._subscriptionStatusAnnounced = true;\n          let reconnectedAnnounce: StatusAnnouncement = {\n            category: categoryConstants.PNReconnectedCategory,\n            operation: status.operation,\n            lastTimetoken: this._lastTimetoken,\n            currentTimetoken: this._currentTimetoken\n          };\n          this._listenerManager.announceStatus(reconnectedAnnounce);\n        });\n\n        this._reconnectionManager.startPolling();\n        this._listenerManager.announceStatus(status);\n      } else if (status.category === categoryConstants.PNBadRequestCategory) {\n        this._stopHeartbeatTimer();\n        this._listenerManager.announceStatus(status);\n      } else {\n        this._listenerManager.announceStatus(status);\n      }\n\n      return;\n    }\n\n    if (this._storedTimetoken) {\n      this._currentTimetoken = this._storedTimetoken;\n      this._storedTimetoken = null;\n    } else {\n      this._lastTimetoken = this._currentTimetoken;\n      this._currentTimetoken = payload.metadata.timetoken;\n    }\n\n    if (!this._subscriptionStatusAnnounced) {\n      let connectedAnnounce: StatusAnnouncement = {};\n      connectedAnnounce.category = categoryConstants.PNConnectedCategory;\n      connectedAnnounce.operation = status.operation;\n      connectedAnnounce.affectedChannels = this._pendingChannelSubscriptions;\n      connectedAnnounce.subscribedChannels = this.getSubscribedChannels();\n      connectedAnnounce.affectedChannelGroups = this._pendingChannelGroupSubscriptions;\n      connectedAnnounce.lastTimetoken = this._lastTimetoken;\n      connectedAnnounce.currentTimetoken = this._currentTimetoken;\n      this._subscriptionStatusAnnounced = true;\n      this._listenerManager.announceStatus(connectedAnnounce);\n\n      // clear the pending connections list\n      this._pendingChannelSubscriptions = [];\n      this._pendingChannelGroupSubscriptions = [];\n    }\n\n    let messages = payload.messages || [];\n    let { requestMessageCountThreshold, dedupeOnSubscribe } = this._config;\n\n    if (requestMessageCountThreshold && messages.length >= requestMessageCountThreshold) {\n      let countAnnouncement: StatusAnnouncement = {};\n      countAnnouncement.category = categoryConstants.PNRequestMessageCountExceededCategory;\n      countAnnouncement.operation = status.operation;\n      this._listenerManager.announceStatus(countAnnouncement);\n    }\n\n    messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (dedupeOnSubscribe) {\n        if (this._dedupingManager.isDuplicate(message)) {\n          return;\n        } else {\n          this._dedupingManager.addEntry(message);\n        }\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        if (channel) {\n          announce.channel = channel.substring(0, channel.lastIndexOf('-pnpres'));\n        }\n\n        if (subscriptionMatch) {\n          announce.subscription = subscriptionMatch.substring(0, subscriptionMatch.lastIndexOf('-pnpres'));\n        }\n\n        announce.action = message.payload.action;\n        announce.state = message.payload.data;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n\n        if (message.payload.join) {\n          announce.join = message.payload.join;\n        }\n\n        if (message.payload.leave) {\n          announce.leave = message.payload.leave;\n        }\n\n        if (message.payload.timeout) {\n          announce.timeout = message.payload.timeout;\n        }\n\n        this._listenerManager.announcePresence(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        if (message.userMetadata) {\n          announce.userMetadata = message.userMetadata;\n        }\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      if (typeof this._subscribeCall.abort === 'function') {\n        this._subscribeCall.abort();\n      }\n      this._subscribeCall = null;\n    }\n  }\n\n}\n"]}