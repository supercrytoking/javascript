{"version":3,"sources":["core/endpoints/subscribe.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;AAqBE,wBAAqD;AAAA,QAAvC,UAAuC,QAAvC,UAAuC;AAAA,QAA3B,MAA2B,QAA3B,MAA2B;;AAAA;;AAAA,0FAC7C,EAAE,cAAF,EAD6C;;AAEnD,UAAK,WAAL,GAAmB,UAAnB;AACA,UAAK,OAAL,GAAe,MAAf;AAHmD;AAIpD;;;;8BAES,I,EAA0B,Q,EAAoB;AAAA,2BAC2B,IAD3B,CAChD,QADgD;AAAA,UAChD,QADgD,kCACrC,EADqC;AAAA,gCAC2B,IAD3B,CACjC,aADiC;AAAA,UACjC,aADiC,uCACjB,EADiB;AAAA,UACb,SADa,GAC2B,IAD3B,CACb,SADa;AAAA,UACF,gBADE,GAC2B,IAD3B,CACF,gBADE;AAAA,UACgB,MADhB,GAC2B,IAD3B,CACgB,MADhB;;AAEtD,UAAI,sBAAsB,SAAS,MAAT,GAAkB,CAAlB,GAAsB,SAAS,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,UAAM,iBAAqC;AACzC,gBAAQ;AACN,mBAAS,EAAE,UAAU,KAAZ,EADH;AAEN,gBAAM,EAFA;AAGN,wBAAc,EAAE,UAAU,IAAZ;AAHR,SADiC;AAMzC,iBAAS,KAAK,OAAL,CAAa,mBAAb,EANgC;AAOzC,aAAK,mBAAmB,KAAK,OAAL,CAAa,YAAhC,GAA+C,GAA/C,GAAqD,mBAAmB,mBAAnB,CAArD,GAA+F;AAP3D,OAA3C;;AAWA,UAAI,CAAC,KAAK,sBAAL,CAA4B,cAA5B,CAAL,EAAkD;AAAE;AAAS;;AAE7D,UAAM,SAAS,KAAK,gBAAL,CAAsB,cAAtB,CAAf;;AAEA,UAAI,cAAc,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,eAAO,eAAP,IAA0B,mBAAmB,cAAc,IAAd,CAAmB,GAAnB,CAAnB,CAA1B;AACD;;AAED,UAAI,oBAAoB,iBAAiB,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,eAAO,aAAP,IAAwB,mBAAmB,gBAAnB,CAAxB;AACD;;AAED,UAAI,SAAJ,EAAe;AACb,eAAO,EAAP,GAAY,SAAZ;AACD;;AAED,UAAI,MAAJ,EAAY;AACV,eAAO,EAAP,GAAY,MAAZ;AACD;;AAED,aAAO,KAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,EAA6B,cAA7B,EAA6C,UAAC,MAAD,EAAuB,OAAvB,EAA2C;AAC7F,YAAI,OAAO,KAAX,EAAkB,OAAO,SAAS,MAAT,CAAP;;AAElB,YAAM,WAAoC,EAA1C;;AAEA,gBAAQ,CAAR,CAAU,OAAV,CAAkB,UAAC,UAAD,EAAgB;AAChC,cAAI,kBAAmC;AACrC,8BAAkB,WAAW,CAAX,CAAa,CADM;AAErC,oBAAQ,WAAW,CAAX,CAAa;AAFgB,WAAvC;AAIA,cAAI,gBAAkC;AACpC,mBAAO,SAAS,WAAW,CAApB,EAAuB,EAAvB,CAD6B;AAEpC,+BAAmB,WAAW,CAFM;AAGpC,qBAAS,WAAW,CAHgB;AAIpC,qBAAS,WAAW,CAJgB;AAKpC,mBAAO,WAAW,CALkB;AAMpC,6BAAiB,WAAW,CANQ;AAOpC,0BAAc,WAAW,CAPW;AAQpC,kCAAsB,WAAW,CARG;AASpC;AAToC,WAAtC;AAWA,mBAAS,IAAT,CAAc,aAAd;AACD,SAjBD;;AAmBA,YAAM,WAA8B;AAClC,qBAAW,QAAQ,CAAR,CAAU,CADa;AAElC,kBAAQ,QAAQ,CAAR,CAAU;AAFgB,SAApC;AAIA,YAAM,WAA8B,EAAE,kBAAF,EAAY,kBAAZ,EAApC;;AAEA,iBAAS,MAAT,EAAiB,QAAjB;AACD,OA/BM,CAAP;AAgCD","file":"core/endpoints/subscribe.js","sourcesContent":["/* @flow */\n\nimport Networking from '../components/networking';\nimport Config from '../components/config';\n\nimport BaseEndpoint from './base.js';\n\nimport { endpointDefinition, statusStruct, PublishMetaData,\n  SubscribeMetadata, SubscribeMessage, SubscribeEnvelope } from '../flow_interfaces';\n\ntype pubSubConstruct = {\n  networking: Networking,\n  config: Config,\n};\n\ntype subscribeArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  timetoken: number,\n  filterExpression: ?string,\n  region: ?string,\n}\n\n\nexport default class extends BaseEndpoint {\n  _networking: Networking;\n  _config: Config;\n\n  constructor({ networking, config }: pubSubConstruct) {\n    super({ config });\n    this._networking = networking;\n    this._config = config;\n  }\n\n  subscribe(args: subscribeArguments, callback: Function) {\n    let { channels = [], channelGroups = [], timetoken, filterExpression, region } = args;\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: {},\n        subscribeKey: { required: true }\n      },\n      timeout: this._config.getSubscribeTimeout(),\n      url: '/v2/subscribe/' + this._config.subscribeKey + '/' + encodeURIComponent(stringifiedChannels) + '/0'\n    };\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n    }\n\n    if (filterExpression && filterExpression.length > 0) {\n      params['filter-expr'] = encodeURIComponent(filterExpression);\n    }\n\n    if (timetoken) {\n      params.tt = timetoken;\n    }\n\n    if (region) {\n      params.tr = region;\n    }\n\n    return this._networking.GET(params, endpointConfig, (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      const messages: Array<SubscribeMessage> = [];\n\n      payload.m.forEach((rawMessage) => {\n        let publishMetaData: PublishMetaData = {\n          publishTimetoken: rawMessage.p.t,\n          region: rawMessage.p.r\n        };\n        let parsedMessage: SubscribeMessage = {\n          shard: parseInt(rawMessage.a, 10),\n          subscriptionMatch: rawMessage.b,\n          channel: rawMessage.c,\n          payload: rawMessage.d,\n          flags: rawMessage.f,\n          issuingClientId: rawMessage.i,\n          subscribeKey: rawMessage.k,\n          originationTimetoken: rawMessage.o,\n          publishMetaData\n        };\n        messages.push(parsedMessage);\n      });\n\n      const metadata: SubscribeMetadata = {\n        timetoken: payload.t.t,\n        region: payload.t.r\n      };\n      const response: SubscribeEnvelope = { messages, metadata };\n\n      callback(status, response);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}