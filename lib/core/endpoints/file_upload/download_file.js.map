{"version":3,"sources":["core/endpoints/file_upload/download_file.js"],"names":["endpoint","getOperation","operationConstants","PNDownloadFileOperation","validateParams","_","params","channel","name","id","getURL","config","subscribeKey","getRequestTimeout","getTransactionTimeout","isAuthSupported","ignoreBody","forceBuffered","getAuthToken","tokenManager","getToken","prepareParams","handleResponse","res","PubNubFile","cryptography","body","response","cipherKey","decrypt","create","data","mimeType","type"],"mappings":";;;;;;;;;;;;;AAGA;;AAGA,IAAMA,QAAgE,GAAG;AACvEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,uBAAzB;AAAA,GADyD;AAGvEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,wBAAP;AACD;;AAED,QAAI,EAACD,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,IAAT,CAAJ,EAAmB;AACjB,aAAO,qBAAP;AACD;;AAED,QAAI,EAACF,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEG,EAAT,CAAJ,EAAiB;AACf,aAAO,mBAAP;AACD;AACF,GAfsE;AAiBvEC,EAAAA,MAAM,EAAE,sBAAaJ,MAAb;AAAA,QAAGK,MAAH,QAAGA,MAAH;AAAA,+BACOA,MAAM,CAACC,YADd,uBACuCN,MAAM,CAACC,OAD9C,oBAC+DD,MAAM,CAACG,EADtE,cAC4EH,MAAM,CAACE,IADnF;AAAA,GAjB+D;AAoBvEK,EAAAA,iBAAiB,EAAE;AAAA,QAAGF,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACG,qBAAP,EAAhB;AAAA,GApBoD;AAsBvEC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAtBsD;AAuBvEC,EAAAA,UAAU,EAAE;AAAA,WAAM,IAAN;AAAA,GAvB2D;AAwBvEC,EAAAA,aAAa,EAAE;AAAA,WAAM,IAAN;AAAA,GAxBwD;AA0BvEC,EAAAA,YAAY,EAAE;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WAAsBA,YAAY,CAACC,QAAb,CAAsB,YAAtB,CAAtB;AAAA,GA1ByD;AA4BvEC,EAAAA,aAAa,EAAE;AAAA,WAAO,EAAP;AAAA,GA5BwD;AA8BvEC,EAAAA,cAAc;AAAA,0FAAE,wBAA6CC,GAA7C,EAAkDjB,MAAlD;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASkB,cAAAA,UAAT,SAASA,UAAT,EAAqBb,MAArB,SAAqBA,MAArB,EAA6Bc,YAA7B,SAA6BA,YAA7B;AACVC,cAAAA,IADU,GACHH,GAAG,CAACI,QAAJ,CAAaD,IADV;;AAAA,mBAGVf,MAAM,CAACiB,SAHG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAICH,YAAY,CAACI,OAAb,sBAAqBvB,MAAM,CAACsB,SAA5B,iEAAyCjB,MAAM,CAACiB,SAAhD,EAA2DF,IAA3D,CAJD;;AAAA;AAIZA,cAAAA,IAJY;;AAAA;AAAA,+CAOPF,UAAU,CAACM,MAAX,CAAkB;AACvBC,gBAAAA,IAAI,EAAEL,IADiB;AAEvBlB,gBAAAA,IAAI,wBAAEe,GAAG,CAACI,QAAJ,CAAanB,IAAf,mEAAuBF,MAAM,CAACE,IAFX;AAGvBwB,gBAAAA,QAAQ,EAAET,GAAG,CAACI,QAAJ,CAAaM;AAHA,eAAlB,CAPO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA9ByD,CAAzE;eA6CejC,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { DownloadFileParams, DownloadFileResult } from './types';\n\nconst endpoint: EndpointConfig<DownloadFileParams, DownloadFileResult> = {\n  getOperation: () => operationConstants.PNDownloadFileOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return \"channel can't be empty\";\n    }\n\n    if (!params?.name) {\n      return \"name can't be empty\";\n    }\n\n    if (!params?.id) {\n      return \"id can't be empty\";\n    }\n  },\n\n  getURL: ({ config }, params) =>\n    `/v1/files/${config.subscribeKey}/channels/${params.channel}/files/${params.id}/${params.name}`,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n  ignoreBody: () => true,\n  forceBuffered: () => true,\n\n  getAuthToken: ({ tokenManager }) => tokenManager.getToken('fileUpload'),\n\n  prepareParams: () => ({}),\n\n  handleResponse: async ({ PubNubFile, config, cryptography }, res, params): Promise<DownloadFileResult> => {\n    let body = res.response.body;\n\n    if (config.cipherKey) {\n      body = await cryptography.decrypt(params.cipherKey ?? config.cipherKey, body);\n    }\n\n    return PubNubFile.create({\n      data: body,\n      name: res.response.name ?? params.name,\n      mimeType: res.response.type,\n    });\n  },\n};\n\nexport default endpoint;\n"],"file":"download_file.js"}