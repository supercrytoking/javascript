{"version":3,"sources":["core/components/endpoint.js"],"names":["modules","endpoint","networking","config","crypto","callback","incomingParams","getOperation","PNTimeOperation","PNChannelGroupsOperation","validationResult","validateParams","createValidationError","outgoingParams","prepareParams","url","decideURL","callInstance","networkingParams","operation","timeout","getRequestTimeout","uuid","UUID","pnsdk","generatePNSDK","useInstanceId","instanceid","instanceId","useRequestId","requestid","v4","isAuthSupported","getAuthKey","auth","secretKey","timestamp","Math","floor","Date","getTime","signInput","subscribeKey","publishKey","PNAccessManagerGrant","PNAccessManagerAudit","signPamFromParams","signature","HMACSHA256","promiseComponent","Promise","createPromise","onResponse","status","payload","error","reject","parsedPayload","handleResponse","fulfill","response","usePost","postPayload","POST","GET","PNSubscribeOperation","promise","createError","errorPayload","type","message","postURL","getURL","base","sdkFamily","partnerId","getVersion"],"mappings":"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","file":"endpoint.js","sourcesContent":["import uuidGenerator from 'uuid';\n\nimport { StatusAnnouncement } from '../flow_interfaces';\nimport utils from '../utils';\nimport Config from './config';\nimport operationConstants from '../constants/operations';\n\nfunction createError(errorPayload: Object, type: string): Object {\n  errorPayload.type = type;\n  return errorPayload;\n}\n\nfunction createValidationError(message: string): Object {\n  return createError({ message }, 'validationError');\n}\n\nfunction decideURL(endpoint, modules, incomingParams) {\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    return endpoint.postURL(modules, incomingParams);\n  } else {\n    return endpoint.getURL(modules, incomingParams);\n  }\n}\n\nfunction generatePNSDK(config: Config): string {\n  let base = 'PubNub-JS-' + config.sdkFamily;\n\n  if (config.partnerId) {\n    base += '-' + config.partnerId;\n  }\n\n  base += '/' + config.getVersion();\n\n  return base;\n}\n\nexport default function (modules, endpoint, ...args) {\n  let { networking, config, crypto } = modules;\n  let callback = null;\n  let incomingParams = {};\n\n  if (endpoint.getOperation() === operationConstants.PNTimeOperation || endpoint.getOperation() === operationConstants.PNChannelGroupsOperation) {\n    callback = args[0];\n  } else {\n    incomingParams = args[0];\n    callback = args[1];\n  }\n\n  let validationResult = endpoint.validateParams(modules, incomingParams);\n\n  if (validationResult) {\n    callback(createValidationError(validationResult));\n    return;\n  }\n\n  let outgoingParams = endpoint.prepareParams(modules, incomingParams);\n  let url = decideURL(endpoint, modules, incomingParams);\n  let callInstance;\n  let networkingParams = { url,\n    operation: endpoint.getOperation(),\n    timeout: endpoint.getRequestTimeout(modules)\n  };\n\n  outgoingParams.uuid = config.UUID;\n  outgoingParams.pnsdk = generatePNSDK(config);\n\n  if (config.useInstanceId) {\n    outgoingParams.instanceid = config.instanceId;\n  }\n\n  if (config.useRequestId) {\n    outgoingParams.requestid = uuidGenerator.v4();\n  }\n\n  if (endpoint.isAuthSupported() && config.getAuthKey()) {\n    outgoingParams.auth = config.getAuthKey();\n  }\n\n  if (config.secretKey) {\n    outgoingParams.timestamp = Math.floor(new Date().getTime() / 1000);\n    let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\n';\n\n    if (endpoint.getOperation() === operationConstants.PNAccessManagerGrant) {\n      signInput += 'grant\\n';\n    } else if (endpoint.getOperation() === operationConstants.PNAccessManagerAudit) {\n      signInput += 'audit\\n';\n    } else {\n      signInput += url + '\\n';\n    }\n\n    signInput += utils.signPamFromParams(outgoingParams);\n    outgoingParams.signature = crypto.HMACSHA256(signInput);\n  }\n\n  let promiseComponent = null;\n\n  // bridge in Promise support.\n  if (Promise && !callback) {\n    promiseComponent = utils.createPromise();\n  }\n\n  let onResponse = (status: StatusAnnouncement, payload: Object) => {\n    if (status.error) {\n      if (callback) {\n        callback(status);\n      } else if (promiseComponent) {\n        promiseComponent.reject({ status });\n      }\n      return;\n    }\n\n    let parsedPayload = endpoint.handleResponse(modules, payload, incomingParams);\n\n    if (callback) {\n      callback(status, parsedPayload);\n    } else if (promiseComponent) {\n      promiseComponent.fulfill({ status, response: parsedPayload });\n    }\n  };\n\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    let payload = endpoint.postPayload(modules, incomingParams);\n    callInstance = networking.POST(outgoingParams, payload, networkingParams, onResponse);\n  } else {\n    callInstance = networking.GET(outgoingParams, networkingParams, onResponse);\n  }\n\n  if (endpoint.getOperation() === operationConstants.PNSubscribeOperation) {\n    return callInstance;\n  }\n\n  if (promiseComponent) {\n    return promiseComponent.promise;\n  }\n}\n"]}