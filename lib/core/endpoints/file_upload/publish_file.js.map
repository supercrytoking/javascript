{"version":3,"sources":["core/endpoints/file_upload/publish_file.js"],"names":["preparePayload","payload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","endpoint","getOperation","operationConstants","PNPublishFileOperation","validateParams","_","params","channel","fileId","fileName","getURL","modules","publishKey","subscribeKey","message","file","name","id","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","getAuthToken","tokenManager","getToken","prepareParams","outParams","ttl","storeInHistory","undefined","store","meta","handleResponse","response","timetoken"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig, Modules } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { PublishFileParams, PublishFileResult } from './types';\nimport utils from '../../utils';\n\nconst preparePayload = ({ crypto, config }: Modules, payload: any): string => {\n  let stringifiedPayload = JSON.stringify(payload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload || '';\n};\n\nconst endpoint: EndpointConfig<PublishFileParams, PublishFileResult> = {\n  getOperation: () => operationConstants.PNPublishFileOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return \"channel can't be empty\";\n    }\n\n    if (!params?.fileId) {\n      return \"file id can't be empty\";\n    }\n\n    if (!params?.fileName) {\n      return \"file name can't be empty\";\n    }\n  },\n\n  getURL: (modules, params) => {\n    const { publishKey, subscribeKey } = modules.config;\n\n    const message = {\n      message: params.message,\n      file: {\n        name: params.fileName,\n        id: params.fileId,\n      },\n    };\n\n    const payload = preparePayload(modules, message);\n\n    return `/v1/files/publish-file/${publishKey}/${subscribeKey}/0/${utils.encodeString(params.channel)}/0/${utils.encodeString(payload)}`;\n  },\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  getAuthToken: ({ tokenManager }) => tokenManager.getToken('fileUpload'),\n\n  prepareParams: (_, params) => {\n    const outParams = {};\n\n    if (params.ttl) {\n      outParams.ttl = params.ttl;\n    }\n\n    if (params.storeInHistory !== undefined) {\n      outParams.store = params.storeInHistory ? '1' : '0';\n    }\n\n    if (params.meta && typeof params.meta === 'object') {\n      outParams.meta = JSON.stringify(params.meta);\n    }\n\n    return outParams;\n  },\n\n  handleResponse: (_, response): PublishFileResult => ({\n    timetoken: response['2'],\n  }),\n};\n\nexport default endpoint;\n"],"file":"publish_file.js"}