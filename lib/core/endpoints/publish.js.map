{"version":3,"sources":["core/endpoints/publish.js"],"names":[],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;AAyBE,wBAA8D;AAAA,QAAhD,UAAgD,QAAhD,UAAgD;AAAA,QAApC,MAAoC,QAApC,MAAoC;AAAA,QAA5B,MAA4B,QAA5B,MAA4B;;AAAA;;AAAA,0FACtD,EAAE,cAAF,EADsD;;AAE5D,UAAK,UAAL,GAAkB,UAAlB;AACA,UAAK,MAAL,GAAc,MAAd;AACA,UAAK,MAAL,GAAc,MAAd;AAJ4D;AAK7D;;;;4BAEO,I,EAAwB,Q,EAAoB;AAAA,UAC1C,OAD0C,GACqB,IADrB,CAC1C,OAD0C;AAAA,UACjC,OADiC,GACqB,IADrB,CACjC,OADiC;AAAA,UACxB,IADwB,GACqB,IADrB,CACxB,IADwB;AAAA,6BACqB,IADrB,CAClB,UADkB;AAAA,UAClB,UADkB,oCACL,KADK;AAAA,UACE,cADF,GACqB,IADrB,CACE,cADF;;AAElD,UAAM,iBAAqC;AACzC,gBAAQ;AACN,mBAAS,EAAE,UAAU,KAAZ,EADH;AAEN,wBAAc,EAAE,UAAU,IAAZ,EAFR;AAGN,sBAAY,EAAE,UAAU,IAAZ,EAHN;AAIN,gBAAM,EAAE,UAAU,KAAZ;AAJA,SADiC;AAOzC,aAAK,cAAc,KAAK,MAAL,CAAY,UAA1B,GAAuC,GAAvC,GAA6C,KAAK,MAAL,CAAY,YAAzD,GAAwE,KAAxE,GAAgF,mBAAmB,OAAnB,CAAhF,GAA8G;AAP1E,OAA3C;;AAUA,UAAI,CAAC,OAAL,EAAc,OAAO,SAAS,KAAK,qBAAL,CAA2B,iBAA3B,CAAT,CAAP;AACd,UAAI,CAAC,OAAL,EAAc,OAAO,SAAS,KAAK,qBAAL,CAA2B,iBAA3B,CAAT,CAAP;;AAGd,UAAI,CAAC,KAAK,sBAAL,CAA4B,cAA5B,CAAL,EAAkD;AAAE;AAAS;;AAE7D,UAAM,SAAS,KAAK,gBAAL,CAAsB,cAAtB,CAAf;;AAEA,UAAI,kBAAkB,IAAtB,EAA4B;AAC1B,YAAI,cAAJ,EAAoB;AAClB,iBAAO,KAAP,GAAe,GAAf;AACD,SAFD,MAEO;AACL,iBAAO,KAAP,GAAe,GAAf;AACD;AACF;;AAED,UAAI,QAAQ,QAAO,IAAP,yCAAO,IAAP,OAAgB,QAA5B,EAAsC;AACpC,eAAO,IAAP,GAAc,KAAK,SAAL,CAAe,IAAf,CAAd;AACD;;AAED,UAAI,aAAa,SAAb,UAAa,CAAC,MAAD,EAAuB,OAAvB,EAA2C;AAC1D,YAAI,OAAO,KAAX,EAAkB,OAAO,SAAS,MAAT,CAAP;;AAElB,YAAI,WAA4B;AAC9B,qBAAW,QAAQ,CAAR;AADmB,SAAhC;;AAIA,iBAAS,MAAT,EAAiB,QAAjB;AACD,OARD;;AAUA,UAAI,qBAAqB,KAAK,SAAL,CAAe,OAAf,CAAzB;;AAEA,UAAI,KAAK,MAAL,CAAY,SAAhB,EAA2B;AACzB,6BAAqB,KAAK,MAAL,CAAY,OAAZ,CAAoB,kBAApB,CAArB;AACA,6BAAqB,KAAK,SAAL,CAAe,kBAAf,CAArB;AACD;;AAED,UAAI,UAAJ,EAAgB;AACd,aAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB,EAA6B,kBAA7B,EAAiD,cAAjD,EAAiE,UAAjE;AACD,OAFD,MAEO;AACL,uBAAe,GAAf,IAAsB,MAAM,mBAAmB,kBAAnB,CAA5B;AACA,aAAK,UAAL,CAAgB,GAAhB,CAAoB,MAApB,EAA4B,cAA5B,EAA4C,UAA5C;AACD;AACF","file":"core/endpoints/publish.js","sourcesContent":["/* @flow */\n\nimport Networking from '../components/networking';\nimport Config from '../components/config';\nimport Crypto from '../components/cryptography/index';\nimport BaseEndpoint from './base.js';\n\nimport { endpointDefinition, statusStruct } from '../flow_interfaces';\n\ntype publishConstruct = {\n  networking: Networking,\n  config: Config,\n  crypto: Crypto\n};\n\ntype publishResponse = {\n  timetoken: number\n};\n\ntype publishArguments = {\n  message: Object | string | number | boolean, // the contents of the dispatch\n  channel: string, // the destination of our dispatch\n  sendByPost: boolean | null, // use POST when dispatching the message\n  storeInHistory: boolean | null, // store the published message in remote history\n  meta: Object // psv2 supports filtering by metadata\n}\n\nexport default class extends BaseEndpoint {\n  networking: Networking;\n  config: Config;\n  crypto: Crypto;\n\n  constructor({ networking, config, crypto }: publishConstruct) {\n    super({ config });\n    this.networking = networking;\n    this.config = config;\n    this.crypto = crypto;\n  }\n\n  publish(args: publishArguments, callback: Function) {\n    const { message, channel, meta, sendByPost = false, storeInHistory } = args;\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        subscribeKey: { required: true },\n        publishKey: { required: true },\n        uuid: { required: false }\n      },\n      url: '/publish/' + this.config.publishKey + '/' + this.config.subscribeKey + '/0/' + encodeURIComponent(channel) + '/0'\n    };\n\n    if (!message) return callback(this.createValidationError('Missing Message'));\n    if (!channel) return callback(this.createValidationError('Missing Channel'));\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (storeInHistory != null) {\n      if (storeInHistory) {\n        params.store = '1';\n      } else {\n        params.store = '0';\n      }\n    }\n\n    if (meta && typeof meta === 'object') {\n      params.meta = JSON.stringify(meta);\n    }\n\n    let onCallback = (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let response: publishResponse = {\n        timetoken: payload[2]\n      };\n\n      callback(status, response);\n    };\n\n    let stringifiedPayload = JSON.stringify(message);\n\n    if (this.config.cipherKey) {\n      stringifiedPayload = this.crypto.encrypt(stringifiedPayload);\n      stringifiedPayload = JSON.stringify(stringifiedPayload);\n    }\n\n    if (sendByPost) {\n      this.networking.POST(params, stringifiedPayload, endpointConfig, onCallback);\n    } else {\n      endpointConfig.url += '/' + encodeURIComponent(stringifiedPayload);\n      this.networking.GET(params, endpointConfig, onCallback);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}