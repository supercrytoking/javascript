{"version":3,"sources":["core/components/endpoint.js"],"names":["modules","endpoint","networking","config","callback","incomingParams","getOperation","PNTimeOperation","PNChannelGroupsOperation","validationResult","validateParams","createValidationError","outgoingParams","prepareParams","url","decideURL","callInstance","networkingParams","operation","timeout","getRequestTimeout","uuid","UUID","pnsdk","generatePNSDK","useInstanceId","instanceid","instanceId","useRequestId","requestid","v4","isAuthSupported","getAuthKey","auth","secretKey","signRequest","promiseComponent","Promise","createPromise","onResponse","status","payload","error","reject","PubNubError","parsedPayload","handleResponse","fulfill","usePost","postPayload","POST","GET","PNSubscribeOperation","promise","message","name","constructor","Error","createError","errorPayload","type","postURL","getURL","base","sdkFamily","partnerId","getVersion","crypto","timestamp","Math","floor","Date","getTime","signInput","subscribeKey","publishKey","signPamFromParams","signature","HMACSHA256","replace"],"mappings":"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","file":"endpoint.js","sourcesContent":["import uuidGenerator from 'uuid';\n\nimport { StatusAnnouncement } from '../flow_interfaces';\nimport utils from '../utils';\nimport Config from './config';\nimport operationConstants from '../constants/operations';\n\nclass PubNubError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.name = this.constructor.name;\n    this.status = status;\n    this.message = message;\n  }\n}\n\nfunction createError(errorPayload: Object, type: string): Object {\n  errorPayload.type = type;\n  return errorPayload;\n}\n\nfunction createValidationError(message: string): Object {\n  return createError({ message }, 'validationError');\n}\n\nfunction decideURL(endpoint, modules, incomingParams) {\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    return endpoint.postURL(modules, incomingParams);\n  } else {\n    return endpoint.getURL(modules, incomingParams);\n  }\n}\n\nfunction generatePNSDK(config: Config): string {\n  let base = 'PubNub-JS-' + config.sdkFamily;\n\n  if (config.partnerId) {\n    base += '-' + config.partnerId;\n  }\n\n  base += '/' + config.getVersion();\n\n  return base;\n}\n\nfunction signRequest(modules, url, outgoingParams) {\n  let { config, crypto } = modules;\n\n  outgoingParams.timestamp = Math.floor(new Date().getTime() / 1000);\n  let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\n' + url + '\\n';\n  signInput += utils.signPamFromParams(outgoingParams);\n\n  let signature = crypto.HMACSHA256(signInput);\n  signature = signature.replace(/\\+/g, '-');\n  signature = signature.replace(/\\//g, '_');\n\n  outgoingParams.signature = signature;\n}\n\nexport default function (modules, endpoint, ...args) {\n  let { networking, config } = modules;\n  let callback = null;\n  let incomingParams = {};\n\n  if (endpoint.getOperation() === operationConstants.PNTimeOperation || endpoint.getOperation() === operationConstants.PNChannelGroupsOperation) {\n    callback = args[0];\n  } else {\n    incomingParams = args[0];\n    callback = args[1];\n  }\n\n  let validationResult = endpoint.validateParams(modules, incomingParams);\n\n  if (validationResult) {\n    callback(createValidationError(validationResult));\n    return;\n  }\n\n  let outgoingParams = endpoint.prepareParams(modules, incomingParams);\n  let url = decideURL(endpoint, modules, incomingParams);\n  let callInstance;\n  let networkingParams = { url,\n    operation: endpoint.getOperation(),\n    timeout: endpoint.getRequestTimeout(modules)\n  };\n\n  outgoingParams.uuid = config.UUID;\n  outgoingParams.pnsdk = generatePNSDK(config);\n\n  if (config.useInstanceId) {\n    outgoingParams.instanceid = config.instanceId;\n  }\n\n  if (config.useRequestId) {\n    outgoingParams.requestid = uuidGenerator.v4();\n  }\n\n  if (endpoint.isAuthSupported() && config.getAuthKey()) {\n    outgoingParams.auth = config.getAuthKey();\n  }\n\n  if (config.secretKey) {\n    signRequest(modules, url, outgoingParams);\n  }\n\n  let promiseComponent = null;\n\n  // bridge in Promise support.\n  if (typeof Promise !== 'undefined' && !callback) {\n    promiseComponent = utils.createPromise();\n  }\n\n  let onResponse = (status: StatusAnnouncement, payload: Object) => {\n    if (status.error) {\n      if (callback) {\n        callback(status);\n      } else if (promiseComponent) {\n        promiseComponent.reject(new PubNubError('PubNub call failed, check status for details', status));\n      }\n      return;\n    }\n\n    let parsedPayload = endpoint.handleResponse(modules, payload, incomingParams);\n\n    if (callback) {\n      callback(status, parsedPayload);\n    } else if (promiseComponent) {\n      promiseComponent.fulfill(parsedPayload);\n    }\n  };\n\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    let payload = endpoint.postPayload(modules, incomingParams);\n    callInstance = networking.POST(outgoingParams, payload, networkingParams, onResponse);\n  } else {\n    callInstance = networking.GET(outgoingParams, networkingParams, onResponse);\n  }\n\n  if (endpoint.getOperation() === operationConstants.PNSubscribeOperation) {\n    return callInstance;\n  }\n\n  if (promiseComponent) {\n    return promiseComponent.promise;\n  }\n}\n"]}