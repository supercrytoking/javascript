{"version":3,"sources":["core/endpoints/presence.js"],"names":[],"mappings":"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","file":"core/endpoints/presence.js","sourcesContent":["/* @flow */\n\nimport Networking from '../components/networking';\nimport Config from '../components/config';\nimport BaseEndpoint from './base.js';\nimport { EndpointDefinition, StatusStruct } from '../flow_interfaces';\n\ntype PresenceConstruct = {\n  networking: Networking,\n  config: Config,\n};\n\ntype HereNowArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  includeUUIDs: boolean,\n  includeState: boolean\n}\n\ntype WhereNowArguments = {\n  uuid: string,\n}\n\ntype WhereNowResponse = {\n  channels: Array<string>,\n}\n\n//\n\ntype GetStateArguments = {\n  uuid: string,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype GetStateResponse = {\n  channels: Object\n}\n\n//\n\ntype SetStateArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SetStateResponse = {\n  state: Object\n}\n\ntype LeaveArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n}\n\ntype HeartbeatArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\nexport default class extends BaseEndpoint {\n  networking: Networking;\n  config: Config;\n\n  constructor({ networking, config }: PresenceConstruct) {\n    super({ config });\n    this.networking = networking;\n    this.config = config;\n  }\n\n  whereNow(args: WhereNowArguments, callback: Function) {\n    let { uuid = this.config.UUID } = args;\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey + '/uuid/' + uuid\n    };\n\n    if (!callback) {\n      return this.log('Missing Callback');\n    }\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let response: WhereNowResponse = {\n        channels: payload.payload.channels\n      };\n\n      callback(status, response);\n    });\n  }\n\n  getState(args: GetStateArguments, callback: Function) {\n    let { uuid = this.config.UUID, channels = [], channelGroups = [] } = args;\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey + '/channel/' + stringifiedChannels + '/uuid/' + uuid\n    };\n\n    if (!callback) {\n      return this.log('Missing Callback');\n    }\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return callback(this.createValidationError('Channel or Channel Group must be supplied'));\n    }\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = channelGroups.join(',');\n    }\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let channelsResponse = {};\n\n      if (channels.length === 1 && channelGroups.length === 0) {\n        channelsResponse[channels[0]] = payload.payload;\n      } else {\n        channelsResponse = payload.payload;\n      }\n\n      let response: GetStateResponse = {\n        channels: channelsResponse\n      };\n\n      callback(status, response);\n    });\n  }\n\n  setState(args: SetStateArguments, callback: Function) {\n    let { state, channels = [], channelGroups = [] } = args;\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey + '/channel/' + stringifiedChannels + '/uuid/' + this.config.UUID + '/data'\n    };\n\n    if (!callback) {\n      return this.log('Missing Callback');\n    }\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return callback(this.createValidationError('Channel or Channel Group must be supplied'));\n    }\n\n    if (!state) {\n      return callback(this.createValidationError('State must be supplied'));\n    }\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    params.state = encodeURIComponent(JSON.stringify(state));\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = channelGroups.join(',');\n    }\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let response: SetStateResponse = {\n        state: payload.payload\n      };\n\n      callback(status, response);\n    });\n  }\n\n  leave(args: LeaveArguments, callback: Function) {\n    let { channels = [], channelGroups = [] } = args;\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey + '/channel/' + encodeURIComponent(stringifiedChannels) + '/leave'\n    };\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n    }\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct) =>\n      callback(status)\n    );\n  }\n\n  hereNow(args: HereNowArguments, callback: Function) {\n    let { channels = [], channelGroups = [], includeUUIDs = true, includeState = false } = args;\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey\n    };\n\n    if (channels.length > 0 || channelGroups.length > 0) {\n      let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n      endpointConfig.url += '/channel/' + encodeURIComponent(stringifiedChannels);\n    }\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (!includeUUIDs) params.disable_uuids = 1;\n    if (includeState) params.state = 1;\n\n    // Make sure we have a Channel\n    if (!callback) {\n      return this.log('Missing Callback');\n    }\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = channelGroups.join(',');\n    }\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct, payload) => {\n      if (status.error) return callback(status);\n\n      let prepareSingularChannel = () => {\n        let response = {};\n        let occupantsList = [];\n        response.totalChannels = 1;\n        response.totalOccupancy = payload.occupancy;\n        response.channels = {};\n        response.channels[channels[0]] = {\n          occupants: occupantsList,\n          name: channels[0],\n          occupancy: payload.occupancy\n        };\n\n        if (includeUUIDs) {\n          payload.uuids.forEach((uuidEntry) => {\n            if (includeState) {\n              occupantsList.push({ state: uuidEntry.state, uuid: uuidEntry.uuid });\n            } else {\n              occupantsList.push({ state: null, uuid: uuidEntry });\n            }\n          });\n        }\n\n        return response;\n      };\n\n      let prepareMultipleChannel = () => {\n        let response = {};\n        response.totalChannels = payload.payload.total_channels;\n        response.totalOccupancy = payload.payload.total_occupancy;\n        response.channels = {};\n\n        Object.keys(payload.payload.channels).forEach((channelName) => {\n          let channelEntry = payload.payload.channels[channelName];\n          let occupantsList = [];\n          response.channels[channelName] = {\n            occupants: occupantsList,\n            name: channelName,\n            occupancy: channelEntry.occupancy\n          };\n\n          if (includeUUIDs) {\n            channelEntry.uuids.forEach((uuidEntry) => {\n              if (includeState) {\n                occupantsList.push({ state: uuidEntry.state, uuid: uuidEntry.uuid });\n              } else {\n                occupantsList.push({ state: null, uuid: uuidEntry });\n              }\n            });\n          }\n\n          return response;\n        });\n\n        return response;\n      };\n\n      let response;\n      if (channels.length > 1 || channelGroups.length > 0) {\n        response = prepareMultipleChannel();\n      } else {\n        response = prepareSingularChannel();\n      }\n\n      callback(status, response);\n    });\n  }\n\n  heartbeat(args: HeartbeatArguments, callback: Function) {\n    let { channels = [], channelGroups = [], state = {} } = args;\n    let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n    const endpointConfig: EndpointDefinition = {\n      params: {\n        uuid: { required: false },\n        authKey: { required: false }\n      },\n      url: '/v2/presence/sub-key/' + this.config.subscribeKey + '/channel/' + encodeURIComponent(stringifiedChannels) + '/heartbeat'\n    };\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n    }\n\n    params.state = encodeURIComponent(JSON.stringify(state));\n    params.heartbeat = this.config.getPresenceTimeout();\n\n    this.networking.GET(params, endpointConfig, (status: StatusStruct) =>\n      callback(status)\n    );\n  }\n\n}\n"],"sourceRoot":"/source/"}