{"version":3,"sources":["core/pubnub-common.js"],"names":["addChannelsChannelGroupConfig","removeChannelsChannelGroupConfig","deleteChannelGroupConfig","listChannelGroupsConfig","listChannelsInChannelGroupConfig","addPushChannelsConfig","removePushChannelsConfig","listPushChannelsConfig","removeDevicePushConfig","presenceLeaveEndpointConfig","presenceWhereNowEndpointConfig","presenceHeartbeatEndpointConfig","presenceGetStateConfig","presenceSetStateConfig","presenceHereNowConfig","auditEndpointConfig","grantEndpointConfig","publishEndpointConfig","historyEndpointConfig","timeEndpointConfig","subscribeEndpointConfig","setup","sendBeacon","db","config","_config","crypto","networking","modules","listenerManager","_listenerManager","timeEndpoint","bind","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","subscribeEndpoint","subscriptionManager","addListener","removeListener","removeAllListeners","channelGroups","listGroups","listChannels","addChannels","removeChannels","deleteGroup","push","deleteDevice","hereNow","whereNow","getState","setState","adaptStateChange","grant","audit","publish","fire","args","callback","replicate","storeInHistory","history","time","subscribe","adaptSubscribeChange","unsubscribe","adaptUnsubscribeChange","reconnect","stop","unsubscribeAll","disconnect","getSubscribedChannels","getSubscribedChannelGroups","encrypt","decrypt","getAuthKey","setAuthKey","setCipherKey","getUUID","setUUID","getFilterExpression","setFilterExpression","version","v4","OPERATIONS","CATEGORIES"],"mappings":";;;;;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;IAAYA,6B;;AACZ;;IAAYC,gC;;AACZ;;IAAYC,wB;;AACZ;;IAAYC,uB;;AACZ;;IAAYC,gC;;AAEZ;;IAAYC,qB;;AACZ;;IAAYC,wB;;AACZ;;IAAYC,sB;;AACZ;;IAAYC,sB;;AAEZ;;IAAYC,2B;;AACZ;;IAAYC,8B;;AACZ;;IAAYC,+B;;AACZ;;IAAYC,sB;;AACZ;;IAAYC,sB;;AACZ;;IAAYC,qB;;AAEZ;;IAAYC,mB;;AACZ;;IAAYC,mB;;AAEZ;;IAAYC,qB;;AACZ;;IAAYC,qB;;AACZ;;IAAYC,kB;;AACZ;;IAAYC,uB;;AAEZ;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;AAqDE,kBAAYC,KAAZ,EAAwC;AAAA;;AAAA;;AAAA,QAChCC,UADgC,GACbD,KADa,CAChCC,UADgC;AAAA,QACpBC,EADoB,GACbF,KADa,CACpBE,EADoB;;;AAGtC,QAAMC,SAAS,KAAKC,OAAL,GAAe,qBAAW,EAAEJ,YAAF,EAASE,MAAT,EAAX,CAA9B;AACA,QAAMG,SAAS,oBAAW,EAAEF,cAAF,EAAX,CAAf;AACA,QAAMG,aAAa,yBAAe,EAAEH,cAAF,EAAUE,cAAV,EAAkBJ,sBAAlB,EAAf,CAAnB;;AAEA,QAAIM,UAAU,EAAEJ,cAAF,EAAUG,sBAAV,EAAsBD,cAAtB,EAAd;AACA,QAAMG,kBAAkB,KAAKC,gBAAL,GAAwB,gCAAhD;;AAGA,QAAMC,eAAe,mBAAgBC,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCT,kBAApC,CAArB;AACA,QAAMc,gBAAgB,mBAAgBD,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCnB,2BAApC,CAAtB;AACA,QAAMyB,oBAAoB,mBAAgBF,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCjB,+BAApC,CAA1B;AACA,QAAMwB,mBAAmB,mBAAgBH,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCf,sBAApC,CAAzB;AACA,QAAMuB,oBAAoB,mBAAgBJ,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCR,uBAApC,CAA1B;;;AAGA,QAAMiB,sBAAsB,mCAAwB;AAClDN,gCADkD;AAElDE,kCAFkD;AAGlDC,0CAHkD;AAIlDC,wCAJkD;AAKlDC,0CALkD;AAMlDV,cAAQE,QAAQF,MANkC;AAOlDF,cAAQI,QAAQJ,MAPkC;AAQlDK;AARkD,KAAxB,CAA5B;;AAWA,SAAKS,WAAL,GAAmBT,gBAAgBS,WAAhB,CAA4BN,IAA5B,CAAiCH,eAAjC,CAAnB;AACA,SAAKU,cAAL,GAAsBV,gBAAgBU,cAAhB,CAA+BP,IAA/B,CAAoCH,eAApC,CAAtB;AACA,SAAKW,kBAAL,GAA0BX,gBAAgBW,kBAAhB,CAAmCR,IAAnC,CAAwCH,eAAxC,CAA1B;;AAGA,SAAKY,aAAL,GAAqB;AACnBC,kBAAY,mBAAgBV,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCzB,uBAApC,CADO;AAEnBwC,oBAAc,mBAAgBX,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCxB,gCAApC,CAFK;AAGnBwC,mBAAa,mBAAgBZ,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoC5B,6BAApC,CAHM;AAInB6C,sBAAgB,mBAAgBb,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoC3B,gCAApC,CAJG;AAKnB6C,mBAAa,mBAAgBd,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoC1B,wBAApC;AALM,KAArB;;AAQA,SAAK6C,IAAL,GAAY;AACVH,mBAAa,mBAAgBZ,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCvB,qBAApC,CADH;AAEVwC,sBAAgB,mBAAgBb,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCtB,wBAApC,CAFN;AAGV0C,oBAAc,mBAAgBhB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCpB,sBAApC,CAHJ;AAIVmC,oBAAc,mBAAgBX,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCrB,sBAApC;AAJJ,KAAZ;;AAOA,SAAK0C,OAAL,GAAe,mBAAgBjB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCd,qBAApC,CAAf;AACA,SAAKoC,QAAL,GAAgB,mBAAgBlB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoClB,8BAApC,CAAhB;AACA,SAAKyC,QAAL,GAAgB,mBAAgBnB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoChB,sBAApC,CAAhB;AACA,SAAKwC,QAAL,GAAgBf,oBAAoBgB,gBAApB,CAAqCrB,IAArC,CAA0CK,mBAA1C,CAAhB;;AAEA,SAAKiB,KAAL,GAAa,mBAAgBtB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCZ,mBAApC,CAAb;AACA,SAAKuC,KAAL,GAAa,mBAAgBvB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCb,mBAApC,CAAb;;AAEA,SAAKyC,OAAL,GAAe,mBAAgBxB,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCX,qBAApC,CAAf;;AAEA,SAAKwC,IAAL,GAAY,UAACC,IAAD,EAAOC,QAAP,EAAoB;AAC9BD,WAAKE,SAAL,GAAiB,KAAjB;AACAF,WAAKG,cAAL,GAAsB,KAAtB;AACA,YAAKL,OAAL,CAAaE,IAAb,EAAmBC,QAAnB;AACD,KAJD;;AAMA,SAAKG,OAAL,GAAe,mBAAgB9B,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B,EAAoCV,qBAApC,CAAf;;AAEA,SAAK6C,IAAL,GAAYhC,YAAZ;;AAGA,SAAKiC,SAAL,GAAiB3B,oBAAoB4B,oBAApB,CAAyCjC,IAAzC,CAA8CK,mBAA9C,CAAjB;AACA,SAAK6B,WAAL,GAAmB7B,oBAAoB8B,sBAApB,CAA2CnC,IAA3C,CAAgDK,mBAAhD,CAAnB;AACA,SAAK+B,SAAL,GAAiB/B,oBAAoB+B,SAApB,CAA8BpC,IAA9B,CAAmCK,mBAAnC,CAAjB;AACA,SAAKgC,IAAL,GAAY,YAAM;AAChBhC,0BAAoBiC,cAApB;AACAjC,0BAAoBkC,UAApB;AACD,KAHD;;AAKA,SAAKD,cAAL,GAAsBjC,oBAAoBiC,cAApB,CAAmCtC,IAAnC,CAAwCK,mBAAxC,CAAtB;;AAEA,SAAKmC,qBAAL,GAA6BnC,oBAAoBmC,qBAApB,CAA0CxC,IAA1C,CAA+CK,mBAA/C,CAA7B;AACA,SAAKoC,0BAAL,GAAkCpC,oBAAoBoC,0BAApB,CAA+CzC,IAA/C,CAAoDK,mBAApD,CAAlC;;AAGA,SAAKqC,OAAL,GAAehD,OAAOgD,OAAP,CAAe1C,IAAf,CAAoBN,MAApB,CAAf;AACA,SAAKiD,OAAL,GAAejD,OAAOiD,OAAP,CAAe3C,IAAf,CAAoBN,MAApB,CAAf;;AAGA,SAAKkD,UAAL,GAAkBhD,QAAQJ,MAAR,CAAeoD,UAAf,CAA0B5C,IAA1B,CAA+BJ,QAAQJ,MAAvC,CAAlB;AACA,SAAKqD,UAAL,GAAkBjD,QAAQJ,MAAR,CAAeqD,UAAf,CAA0B7C,IAA1B,CAA+BJ,QAAQJ,MAAvC,CAAlB;AACA,SAAKsD,YAAL,GAAoBlD,QAAQJ,MAAR,CAAesD,YAAf,CAA4B9C,IAA5B,CAAiCJ,QAAQJ,MAAzC,CAApB;AACA,SAAKuD,OAAL,GAAenD,QAAQJ,MAAR,CAAeuD,OAAf,CAAuB/C,IAAvB,CAA4BJ,QAAQJ,MAApC,CAAf;AACA,SAAKwD,OAAL,GAAepD,QAAQJ,MAAR,CAAewD,OAAf,CAAuBhD,IAAvB,CAA4BJ,QAAQJ,MAApC,CAAf;AACA,SAAKyD,mBAAL,GAA2BrD,QAAQJ,MAAR,CAAeyD,mBAAf,CAAmCjD,IAAnC,CAAwCJ,QAAQJ,MAAhD,CAA3B;AACA,SAAK0D,mBAAL,GAA2BtD,QAAQJ,MAAR,CAAe0D,mBAAf,CAAmClD,IAAnC,CAAwCJ,QAAQJ,MAAhD,CAA3B;AACD;;;;iCAGoB;AACnB,aAAO,kBAAY2D,OAAnB;AACD;;;mCAE6B;AAC5B,aAAO,eAAcC,EAAd,EAAP;AACD;;;;;;OAEMC,U;OACAC,U","file":"pubnub-common.js","sourcesContent":["/* @flow */\n\nimport uuidGenerator from 'uuid';\n\nimport Networking from './components/networking';\nimport Config from './components/config';\nimport Crypto from './components/cryptography/index';\nimport SubscriptionManager from './components/subscription_manager';\nimport ListenerManager from './components/listener_manager';\n\nimport endpointCreator from './components/endpoint';\n\nimport * as addChannelsChannelGroupConfig from './endpoints/channel_groups/add_channels';\nimport * as removeChannelsChannelGroupConfig from './endpoints/channel_groups/remove_channels';\nimport * as deleteChannelGroupConfig from './endpoints/channel_groups/delete_group';\nimport * as listChannelGroupsConfig from './endpoints/channel_groups/list_groups';\nimport * as listChannelsInChannelGroupConfig from './endpoints/channel_groups/list_channels';\n\nimport * as addPushChannelsConfig from './endpoints/push/add_push_channels';\nimport * as removePushChannelsConfig from './endpoints/push/remove_push_channels';\nimport * as listPushChannelsConfig from './endpoints/push/list_push_channels';\nimport * as removeDevicePushConfig from './endpoints/push/remove_device';\n\nimport * as presenceLeaveEndpointConfig from './endpoints/presence/leave';\nimport * as presenceWhereNowEndpointConfig from './endpoints/presence/where_now';\nimport * as presenceHeartbeatEndpointConfig from './endpoints/presence/heartbeat';\nimport * as presenceGetStateConfig from './endpoints/presence/get_state';\nimport * as presenceSetStateConfig from './endpoints/presence/set_state';\nimport * as presenceHereNowConfig from './endpoints/presence/here_now';\n\nimport * as auditEndpointConfig from './endpoints/access_manager/audit';\nimport * as grantEndpointConfig from './endpoints/access_manager/grant';\n\nimport * as publishEndpointConfig from './endpoints/publish';\nimport * as historyEndpointConfig from './endpoints/history';\nimport * as timeEndpointConfig from './endpoints/time';\nimport * as subscribeEndpointConfig from './endpoints/subscribe';\n\nimport packageJSON from '../../package.json';\nimport OPERATIONS from './constants/operations';\nimport CATEGORIES from './constants/categories';\n\nimport { InternalSetupStruct } from './flow_interfaces';\n\nexport default class {\n\n  _config: Config;\n  _listenerManager: ListenerManager;\n\n  // tell flow about the mounted endpoint\n  time: Function;\n  publish: Function;\n  fire: Function;\n  history: Function;\n  //\n  channelGroups: Object;\n  //\n  push: Object;\n  //\n  hereNow: Function;\n  whereNow: Function;\n  getState: Function;\n  setState: Function;\n  //\n  grant: Function;\n  audit: Function;\n  //\n  subscribe: Function;\n  unsubscribe: Function;\n  unsubscribeAll: Function;\n  reconnect: Function;\n  stop: Function;\n\n  getSubscribedChannels: Function;\n  getSubscribedChannelGroups: Function;\n\n  addListener: Function;\n  removeListener: Function;\n  removeAllListeners: Function;\n\n  getAuthKey: Function;\n  setAuthKey: Function;\n\n  setCipherKey: Function;\n  setUUID: Function;\n  getUUID: Function;\n\n  getFilterExpression: Function;\n  setFilterExpression: Function;\n\n  encrypt: Function;\n  decrypt: Function;\n\n  //\n\n  constructor(setup: InternalSetupStruct) {\n    let { sendBeacon, db } = setup;\n\n    const config = this._config = new Config({ setup, db });\n    const crypto = new Crypto({ config });\n    const networking = new Networking({ config, crypto, sendBeacon });\n\n    let modules = { config, networking, crypto };\n    const listenerManager = this._listenerManager = new ListenerManager();\n\n    // new\n    const timeEndpoint = endpointCreator.bind(this, modules, timeEndpointConfig);\n    const leaveEndpoint = endpointCreator.bind(this, modules, presenceLeaveEndpointConfig);\n    const heartbeatEndpoint = endpointCreator.bind(this, modules, presenceHeartbeatEndpointConfig);\n    const setStateEndpoint = endpointCreator.bind(this, modules, presenceSetStateConfig);\n    const subscribeEndpoint = endpointCreator.bind(this, modules, subscribeEndpointConfig);\n    //\n\n    const subscriptionManager = new SubscriptionManager({\n      timeEndpoint,\n      leaveEndpoint,\n      heartbeatEndpoint,\n      setStateEndpoint,\n      subscribeEndpoint,\n      crypto: modules.crypto,\n      config: modules.config,\n      listenerManager,\n    });\n\n    this.addListener = listenerManager.addListener.bind(listenerManager);\n    this.removeListener = listenerManager.removeListener.bind(listenerManager);\n    this.removeAllListeners = listenerManager.removeAllListeners.bind(listenerManager);\n\n    /** channel groups **/\n    this.channelGroups = {\n      listGroups: endpointCreator.bind(this, modules, listChannelGroupsConfig),\n      listChannels: endpointCreator.bind(this, modules, listChannelsInChannelGroupConfig),\n      addChannels: endpointCreator.bind(this, modules, addChannelsChannelGroupConfig),\n      removeChannels: endpointCreator.bind(this, modules, removeChannelsChannelGroupConfig),\n      deleteGroup: endpointCreator.bind(this, modules, deleteChannelGroupConfig)\n    };\n    /** push **/\n    this.push = {\n      addChannels: endpointCreator.bind(this, modules, addPushChannelsConfig),\n      removeChannels: endpointCreator.bind(this, modules, removePushChannelsConfig),\n      deleteDevice: endpointCreator.bind(this, modules, removeDevicePushConfig),\n      listChannels: endpointCreator.bind(this, modules, listPushChannelsConfig)\n    };\n    /** presence **/\n    this.hereNow = endpointCreator.bind(this, modules, presenceHereNowConfig);\n    this.whereNow = endpointCreator.bind(this, modules, presenceWhereNowEndpointConfig);\n    this.getState = endpointCreator.bind(this, modules, presenceGetStateConfig);\n    this.setState = subscriptionManager.adaptStateChange.bind(subscriptionManager);\n    /** PAM **/\n    this.grant = endpointCreator.bind(this, modules, grantEndpointConfig);\n    this.audit = endpointCreator.bind(this, modules, auditEndpointConfig);\n    //\n    this.publish = endpointCreator.bind(this, modules, publishEndpointConfig);\n\n    this.fire = (args, callback) => {\n      args.replicate = false;\n      args.storeInHistory = false;\n      this.publish(args, callback);\n    };\n\n    this.history = endpointCreator.bind(this, modules, historyEndpointConfig);\n\n    this.time = timeEndpoint;\n\n    // subscription related methods\n    this.subscribe = subscriptionManager.adaptSubscribeChange.bind(subscriptionManager);\n    this.unsubscribe = subscriptionManager.adaptUnsubscribeChange.bind(subscriptionManager);\n    this.reconnect = subscriptionManager.reconnect.bind(subscriptionManager);\n    this.stop = () => {\n      subscriptionManager.unsubscribeAll();\n      subscriptionManager.disconnect();\n    };\n\n    this.unsubscribeAll = subscriptionManager.unsubscribeAll.bind(subscriptionManager);\n\n    this.getSubscribedChannels = subscriptionManager.getSubscribedChannels.bind(subscriptionManager);\n    this.getSubscribedChannelGroups = subscriptionManager.getSubscribedChannelGroups.bind(subscriptionManager);\n\n    // mount crypto\n    this.encrypt = crypto.encrypt.bind(crypto);\n    this.decrypt = crypto.decrypt.bind(crypto);\n\n    /** config **/\n    this.getAuthKey = modules.config.getAuthKey.bind(modules.config);\n    this.setAuthKey = modules.config.setAuthKey.bind(modules.config);\n    this.setCipherKey = modules.config.setCipherKey.bind(modules.config);\n    this.getUUID = modules.config.getUUID.bind(modules.config);\n    this.setUUID = modules.config.setUUID.bind(modules.config);\n    this.getFilterExpression = modules.config.getFilterExpression.bind(modules.config);\n    this.setFilterExpression = modules.config.setFilterExpression.bind(modules.config);\n  }\n\n\n  getVersion(): String {\n    return packageJSON.version;\n  }\n\n  static generateUUID(): string {\n    return uuidGenerator.v4();\n  }\n\n  static OPERATIONS = OPERATIONS;\n  static CATEGORIES = CATEGORIES;\n\n}\n"]}