{"version":3,"sources":["core/endpoints/objects/membership/get.js"],"names":["endpoint","getOperation","operationConstants","PNGetMembershipsOperation","validateParams","_","params","uuid","getURL","config","subscribeKey","getRequestTimeout","getTransactionTimeout","isAuthSupported","getAuthToken","tokenManager","getToken","prepareParams","_modules","queryParams","include","customFields","push","customChannelFields","channelFields","join","totalCount","count","page","next","start","prev","end","filter","limit","sort","Object","entries","map","key","value","handleResponse","response","status","data"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../../endpoint';\nimport operationConstants from '../../../constants/operations';\nimport type { Membership, PaginatedResultParams } from './membership';\n\nexport type GetMembershipsParams = {\n  uuid: string,\n} & PaginatedResultParams;\n\nexport type GetMembershipsResult = {|\n  status: 200,\n  data: Membership[],\n  totalCount?: number,\n  prev?: string,\n  next?: string,\n|};\n\nconst endpoint: EndpointConfig<GetMembershipsParams, GetMembershipsResult> = {\n  getOperation: () => operationConstants.PNGetMembershipsOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.uuid) {\n      return 'UUID cannot be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => `/v2/objects/${config.subscribeKey}/uuids/${params.uuid}/channels`,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  getAuthToken: ({ tokenManager }) => tokenManager.getToken('membership'),\n\n  prepareParams: (_modules, params) => {\n    const queryParams = {};\n\n    if (params?.include) {\n      queryParams.include = [];\n\n      if (params.include?.customFields) {\n        queryParams.include.push('custom');\n      }\n\n      if (params.include?.customChannelFields) {\n        queryParams.include.push('channel.custom');\n      }\n\n      if (params.include?.channelFields) {\n        queryParams.include.push('channel');\n      }\n\n      queryParams.include = queryParams.include.join(',');\n    }\n\n    if (params?.include?.totalCount) {\n      queryParams.count = params.include?.totalCount;\n    }\n\n    if (params?.page?.next) {\n      queryParams.start = params.page?.next;\n    }\n\n    if (params?.page?.prev) {\n      queryParams.end = params.page?.prev;\n    }\n\n    if (params?.filter) {\n      queryParams.filter = params.filter;\n    }\n\n    queryParams.limit = params?.limit ?? 100;\n\n    if (params?.sort) {\n      queryParams.sort = Object.entries(params.sort ?? {}).map(([key, value]) => {\n        if (value === 'asc' || value === 'desc') {\n          return `${key}:${value}`;\n        } else {\n          return key;\n        }\n      });\n    }\n\n    return queryParams;\n  },\n\n  handleResponse: (_, response): GetMembershipsResult => ({\n    status: response.status,\n    data: response.data,\n    totalCount: response.totalCount,\n    prev: response.prev,\n    next: response.next,\n  }),\n};\n\nexport default endpoint;\n"],"file":"get.js"}