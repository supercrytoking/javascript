{"version":3,"sources":["networking/modules/react_native.js"],"names":["postfileuri","url","fields","fileInput","formData","FormData","forEach","key","value","append","fetch","method","body","result","postfile","uri","getfile","params","endpoint","callback","getStandardOrigin","Object","keys","length","searchParams","URLSearchParams","indexOf","toString","fetchResult","headers","then","resp","status","error","operation","statusCode","ignoreBody","parsedResponse","redirects","response","JSON","text","parse","errorData","message","service","category","_detectErrorCategory","err","_config","logVerbosity","e"],"mappings":"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","sourcesContent":["/* @flow */\n/* global FormData */\n/* global fetch */\n\nimport { EndpointDefinition, StatusAnnouncement } from '../../core/flow_interfaces';\nimport { postfile as postfilewebnode } from './web-node';\n\nasync function postfileuri(\n  url: string,\n  fields: $ReadOnlyArray<{ key: string, value: string }>,\n  fileInput: any\n): Promise<any> {\n  const formData = new FormData();\n\n  fields.forEach(({ key, value }) => {\n    formData.append(key, value);\n  });\n\n  formData.append('file', fileInput);\n\n  const result = await fetch(url, {\n    method: 'POST',\n    body: formData\n  });\n\n  return result;\n}\n\nexport async function postfile(\n  url: string,\n  fields: $ReadOnlyArray<{ key: string, value: string }>,\n  fileInput: any\n): Promise<any> {\n  if (!fileInput.uri) {\n    return postfilewebnode(url, fields, fileInput);\n  } else {\n    return postfileuri(url, fields, fileInput);\n  }\n}\n\nexport function getfile(params: Object, endpoint: EndpointDefinition, callback: Function): Promise<any> {\n  let url = this.getStandardOrigin() + endpoint.url;\n\n  if (params && Object.keys(params).length > 0) {\n    let searchParams = new URLSearchParams(params);\n\n    if (endpoint.url.indexOf('?') > -1) {\n      url += '&';\n    } else {\n      url += '?';\n    }\n\n    url += searchParams.toString();\n  }\n\n  let fetchResult = fetch(url, { method: 'GET', headers: endpoint.headers });\n\n  fetchResult.then(async (resp) => {\n    let parsedResponse;\n    let status: StatusAnnouncement = {};\n    status.error = false;\n    status.operation = endpoint.operation;\n\n    if (resp && resp.status) {\n      status.statusCode = resp.status;\n    }\n\n    if (endpoint.ignoreBody) {\n      parsedResponse = {\n        headers: resp.headers,\n        redirects: [],\n        response: resp,\n      };\n    } else {\n      try {\n        parsedResponse = JSON.parse(await resp.text());\n      } catch (e) {\n        status.errorData = resp;\n        status.error = true;\n        return callback(status, null);\n      }\n    }\n\n    if (\n      parsedResponse.error &&\n      parsedResponse.error === 1 &&\n      parsedResponse.status &&\n      parsedResponse.message &&\n      parsedResponse.service\n    ) {\n      status.errorData = parsedResponse;\n      status.statusCode = parsedResponse.status;\n      status.error = true;\n      status.category = this._detectErrorCategory(status);\n      return callback(status, null);\n    } else if (parsedResponse.error && parsedResponse.error.message) {\n      status.errorData = parsedResponse.error;\n    }\n\n    // returning the entire response in order to use response methods for\n    // reading the body in react native because the response.body\n    // is a ReadableStream which doesn't seem to be reliable on ios and android\n    return callback(status, { response: { body: resp } });\n  });\n\n  fetchResult.catch((err) => {\n    let status: StatusAnnouncement = {};\n    status.error = true;\n    status.operation = endpoint.operation;\n\n    if (err.response && err.response.text && !this._config.logVerbosity) {\n      try {\n        status.errorData = JSON.parse(err.response.text);\n      } catch (e) {\n        status.errorData = err;\n      }\n    } else {\n      status.errorData = err;\n    }\n\n    status.category = this._detectErrorCategory(err);\n\n    return callback(status, null);\n  });\n\n  return fetchResult;\n}\n"],"file":"react_native.js"}