{"version":3,"sources":["core/flow_interfaces.js"],"names":[],"mappings":";;AA6IA,OAAO,OAAP,GAAiB,EAAjB","file":"core/flow_interfaces.js","sourcesContent":["/* eslint no-unused-vars: 0 */\ndeclare module 'uuid' {\n  declare function v4(): string;\n}\n\ndeclare module 'superagent' {\n  declare function type(): superagent;\n}\n\nexport type CallbackStruct = {\n  status: Function,\n  presence: Function,\n  message: Function\n}\n\nexport type ProxyStruct = {\n  port: number,\n  hostname: string,\n  headers: Object\n}\n\nexport type StatusStruct = {\n  error: boolean,\n  statusCode: number\n}\n\nexport type InternalSetupStruct = {\n  useSendBeacon: ?boolean, // configuration on beacon usage\n  publishKey: ?string, // API key required for publishing\n  subscribeKey: string, // API key required to subscribe\n  cipherKey: string, // decryption keys\n  origin: ?string, // an optional FQDN which will recieve calls from the SDK.\n  ssl: boolean, // is SSL enabled?\n  shutdown: Function, // function to call when pubnub is shutting down.\n\n  sendBeacon: ?Function, // executes a call against the Beacon API\n  useSendBeacon: ?boolean, // enable, disable usage of send beacons\n\n  navigatorOnlineCheck: Function, // a function which abstracts out navigator.onLine\n\n  onStatus: Function, // function to call when a status shows up.\n  onPresence: Function, // function to call when new presence data shows up\n  onMessage: Function, // function to call when a new presence shows up\n\n  subscribeRequestTimeout: ?number, // how long to wait for subscribe requst\n  transactionalRequestTimeout: ?number, // how long to wait for transactional requests\n\n  proxy: ?ProxyStruct, // configuration to support proxy settings.\n\n  suppressLev: ?boolean,\n\n  db: Function // get / set implementation to store data\n\n}\n\ntype DatabaseInterface = {\n  get: Function,\n  set: Function\n}\n\ntype EndpointKeyDefinition = {\n  required: boolean\n}\n\ntype SupportedParams = {\n  subscribeKey: EndpointKeyDefinition,\n  uuid: EndpointKeyDefinition,\n}\n\nexport type endpointDefinition = {\n  params: SupportedParams,\n  timeout: number,\n  url: string\n}\n\nexport type StateChangeAnnouncement = {\n  state: Object,\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\n// ****************** SUBSCRIPTIONS ********************************************\n\ntype SubscribeMetadata = {\n  timetoken: number,\n  region: number\n}\n\ntype PublishMetaData = {\n  publishTimetoken: number,\n  region: number\n}\n\ntype SubscribeMessage = {\n  shard: string,\n  subscriptionMatch: string,\n  channel: string,\n  payload: Object,\n  flags: string,\n  issuingClientId: string,\n  subscribeKey: string,\n  originationTimetoken: string,\n  publishMetaData: PublishMetaData\n\n}\n\n// subscribe responses\ntype SubscribeEnvelope = {\n  messages: Array<SubscribeMessage>,\n  metadata: SubscribeMetadata;\n}\n\n// *****************************************************************************\n\n\n// ****************** Announcements ********************************************\n\ntype PresenceAnnouncement = {\n  event: string,\n\n  uuid: string,\n  timestamp: number,\n  occupancy: number,\n  state: Object,\n\n  subscribedChannel: string,\n  actualChannel: string,\n  timetoken: number,\n  userMetadata: Object\n}\n\ntype MessageAnnouncement = {\n\n  message: Object,\n\n  subscribedChannel: string,\n  actualChannel: string,\n  timetoken: number,\n  userMetadata: Object\n}\n\nmodule.exports = {};\n"],"sourceRoot":"/source/"}