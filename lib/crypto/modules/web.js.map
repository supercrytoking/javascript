{"version":3,"sources":["crypto/modules/web.js"],"names":["concatArrayBuffer","ab1","ab2","tmp","Uint8Array","byteLength","set","buffer","WebCryptography","key","input","getKey","cKey","ArrayBuffer","encryptArrayBuffer","encryptString","Error","decryptArrayBuffer","decryptString","file","File","bKey","toArrayBuffer","abPlaindata","abCipherdata","create","name","mimeType","data","Buffer","from","crypto","subtle","digest","abHash","abKey","toString","slice","importKey","plaintext","abIv","getRandomValues","encrypt","iv","ciphertext","decrypt","abPlaintext","abPayload","abCiphertext"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport crypto, { type $CryptoKey } from 'isomorphic-webcrypto';\n\nimport type { ICryptography } from '../';\nimport type { IFile, FileClass } from '../../file';\n\nfunction concatArrayBuffer(ab1: ArrayBuffer, ab2: ArrayBuffer): ArrayBuffer {\n  const tmp = new Uint8Array(ab1.byteLength + ab2.byteLength);\n\n  tmp.set(new Uint8Array(ab1), 0);\n  tmp.set(new Uint8Array(ab2), ab1.byteLength);\n\n  return tmp.buffer;\n}\n\nexport default class WebCryptography implements ICryptography<ArrayBuffer | string> {\n  static IV_LENGTH = 16;\n\n  get algo() {\n    return 'aes-256-cbc';\n  }\n\n  async encrypt(key: string, input: ArrayBuffer | string): Promise<ArrayBuffer | string> {\n    const cKey = await this.getKey(key);\n\n    if (input instanceof ArrayBuffer) {\n      return this.encryptArrayBuffer(cKey, input);\n    } else if (typeof input === 'string') {\n      return this.encryptString(cKey, input);\n    } else {\n      throw new Error('Cannot encrypt this file. In browsers file encryption supports only string or ArrayBuffer');\n    }\n  }\n\n  async decrypt(key: string, input: ArrayBuffer | string): Promise<ArrayBuffer | string> {\n    const cKey = await this.getKey(key);\n\n    if (input instanceof ArrayBuffer) {\n      return this.decryptArrayBuffer(cKey, input);\n    } else if (typeof input === 'string') {\n      return this.decryptString(cKey, input);\n    } else {\n      throw new Error('Cannot decrypt this file. In browsers file decryption supports only string or ArrayBuffer');\n    }\n  }\n\n  async encryptFile(key: string, file: IFile, File: FileClass): Promise<IFile> {\n    const bKey = await this.getKey(key);\n\n    const abPlaindata = await file.toArrayBuffer();\n\n    const abCipherdata = await this.encryptArrayBuffer(bKey, abPlaindata);\n\n    return File.create({\n      name: file.name,\n      mimeType: 'application/octet-stream',\n      data: abCipherdata,\n    });\n  }\n\n  async decryptFile(key: string, file: IFile, File: FileClass): Promise<IFile> {\n    const bKey = await this.getKey(key);\n\n    const abCipherdata = await file.toArrayBuffer();\n\n    const abPlaindata = await this.decryptArrayBuffer(bKey, abCipherdata);\n\n    if (file.data instanceof ArrayBuffer) {\n      return File.create({\n        name: file.name,\n        data: abPlaindata,\n      });\n    } else {\n      throw new Error('Cannot decrypt this file. In browser environment file decryption supports only ArrayBuffer.');\n    }\n  }\n\n  async getKey(key: string): Promise<$CryptoKey> {\n    const bKey = Buffer.from(key);\n    const abHash = await crypto.subtle.digest('SHA-256', bKey.buffer);\n\n    const abKey = Buffer.from(Buffer.from(abHash).toString('hex').slice(0, 32), 'utf8').buffer;\n\n    return crypto.subtle.importKey('raw', abKey, 'AES-CBC', true, ['encrypt', 'decrypt']);\n  }\n\n  async encryptArrayBuffer(key: $CryptoKey, plaintext: ArrayBuffer) {\n    const abIv = crypto.getRandomValues(new Uint8Array(16));\n\n    return concatArrayBuffer(abIv.buffer, await crypto.subtle.encrypt({ name: 'AES-CBC', iv: abIv }, key, plaintext));\n  }\n\n  async decryptArrayBuffer(key: $CryptoKey, ciphertext: ArrayBuffer) {\n    const abIv = ciphertext.slice(0, 16);\n\n    return crypto.subtle.decrypt({ name: 'AES-CBC', iv: abIv }, key, ciphertext.slice(16));\n  }\n\n  async encryptString(key: $CryptoKey, plaintext: string) {\n    const abIv = crypto.getRandomValues(new Uint8Array(16));\n\n    const abPlaintext = Buffer.from(plaintext).buffer;\n    const abPayload = await crypto.subtle.encrypt({ name: 'AES-CBC', iv: abIv }, key, abPlaintext);\n\n    const ciphertext = concatArrayBuffer(abIv.buffer, abPayload);\n\n    return Buffer.from(ciphertext).toString('utf8');\n  }\n\n  async decryptString(key: $CryptoKey, ciphertext: string) {\n    const abCiphertext = Buffer.from(ciphertext);\n    const abIv = abCiphertext.slice(0, 16);\n    const abPayload = abCiphertext.slice(16);\n\n    const abPlaintext = await crypto.subtle.decrypt({ name: 'AES-CBC', iv: abIv }, key, abPayload);\n\n    return Buffer.from(abPlaintext).toString('utf8');\n  }\n}\n"],"file":"web.js"}