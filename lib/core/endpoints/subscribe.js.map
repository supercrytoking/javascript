{"version":3,"sources":["core/endpoints/subscribe.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QAMA,M,GAAA,M;QAOA,a,GAAA,a;QAuBA,c,GAAA,c;;AA1ChB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,sBAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AAAA,MAChC,MADgC,GACrB,OADqB,CAChC,MADgC;;;AAGtC,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,cAAzB,EAAqE;AAAA,MACpE,MADoE,GACzD,OADyD,CACpE,MADoE;AAAA,8BAElD,cAFkD,CAEpE,QAFoE;AAAA,MAEpE,QAFoE,yCAEzD,EAFyD;;AAG1E,MAAI,sBAAsB,SAAS,MAAT,GAAkB,CAAlB,GAAsB,SAAS,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,SAAO,mBAAmB,OAAO,YAA1B,GAAyC,GAAzC,GAA+C,mBAAmB,mBAAnB,CAA/C,GAAyF,IAAhG;AACD;;AAEM,SAAS,aAAT,CAAuB,OAAvB,EAAgC,cAAhC,EAA4E;AAAA,+BACf,cADe,CAC3E,aAD2E;AAAA,MAC3E,aAD2E,0CAC3D,EAD2D;AAAA,MACvD,SADuD,GACf,cADe,CACvD,SADuD;AAAA,MAC5C,gBAD4C,GACf,cADe,CAC5C,gBAD4C;AAAA,MAC1B,MAD0B,GACf,cADe,CAC1B,MAD0B;;AAEjF,MAAM,SAAS,EAAf;;AAEA,MAAI,cAAc,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,WAAO,eAAP,IAA0B,mBAAmB,cAAc,IAAd,CAAmB,GAAnB,CAAnB,CAA1B;AACD;;AAED,MAAI,oBAAoB,iBAAiB,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,WAAO,aAAP,IAAwB,mBAAmB,gBAAnB,CAAxB;AACD;;AAED,MAAI,SAAJ,EAAe;AACb,WAAO,EAAP,GAAY,SAAZ;AACD;;AAED,MAAI,MAAJ,EAAY;AACV,WAAO,EAAP,GAAY,MAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC,cAAjC,EAA4E;AACjF,MAAM,WAAoC,EAA1C;;AAEA,iBAAe,CAAf,CAAiB,OAAjB,CAAyB,UAAC,UAAD,EAAgB;AACvC,QAAI,kBAAmC;AACrC,wBAAkB,WAAW,CAAX,CAAa,CADM;AAErC,cAAQ,WAAW,CAAX,CAAa;AAFgB,KAAvC;AAIA,QAAI,gBAAkC;AACpC,aAAO,SAAS,WAAW,CAApB,EAAuB,EAAvB,CAD6B;AAEpC,yBAAmB,WAAW,CAFM;AAGpC,eAAS,WAAW,CAHgB;AAIpC,eAAS,WAAW,CAJgB;AAKpC,aAAO,WAAW,CALkB;AAMpC,uBAAiB,WAAW,CANQ;AAOpC,oBAAc,WAAW,CAPW;AAQpC,4BAAsB,WAAW,CARG;AASpC;AAToC,KAAtC;AAWA,aAAS,IAAT,CAAc,aAAd;AACD,GAjBD;;AAmBA,MAAM,WAA8B;AAClC,eAAW,eAAe,CAAf,CAAiB,CADM;AAElC,YAAQ,eAAe,CAAf,CAAiB;AAFS,GAApC;;AAKA,SAAO,EAAE,kBAAF,EAAY,kBAAZ,EAAP;AACD","file":"core/endpoints/subscribe.js","sourcesContent":["/* @flow */\n\nimport { SubscribeArguments, PublishMetaData, SubscribeMetadata, SubscribeMessage, SubscribeEnvelope } from '../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNSubscribeOperation';\n}\n\nexport function validateParams(modules) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules, incomingParams: SubscribeArguments): string {\n  let { config } = modules;\n  let { channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return '/v2/subscribe/' + config.subscribeKey + '/' + encodeURIComponent(stringifiedChannels) + '/0';\n}\n\nexport function prepareParams(modules, incomingParams: SubscribeArguments): Object {\n  let { channelGroups = [], timetoken, filterExpression, region } = incomingParams;\n  const params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = encodeURIComponent(channelGroups.join(','));\n  }\n\n  if (filterExpression && filterExpression.length > 0) {\n    params['filter-expr'] = encodeURIComponent(filterExpression);\n  }\n\n  if (timetoken) {\n    params.tt = timetoken;\n  }\n\n  if (region) {\n    params.tr = region;\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules, serverResponse: Object): SubscribeEnvelope {\n  const messages: Array<SubscribeMessage> = [];\n\n  serverResponse.m.forEach((rawMessage) => {\n    let publishMetaData: PublishMetaData = {\n      publishTimetoken: rawMessage.p.t,\n      region: rawMessage.p.r\n    };\n    let parsedMessage: SubscribeMessage = {\n      shard: parseInt(rawMessage.a, 10),\n      subscriptionMatch: rawMessage.b,\n      channel: rawMessage.c,\n      payload: rawMessage.d,\n      flags: rawMessage.f,\n      issuingClientId: rawMessage.i,\n      subscribeKey: rawMessage.k,\n      originationTimetoken: rawMessage.o,\n      publishMetaData\n    };\n    messages.push(parsedMessage);\n  });\n\n  const metadata: SubscribeMetadata = {\n    timetoken: serverResponse.t.t,\n    region: serverResponse.t.r\n  };\n\n  return { messages, metadata };\n}\n"],"sourceRoot":"/source/"}