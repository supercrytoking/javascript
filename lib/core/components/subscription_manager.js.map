{"version":3,"sources":["core/components/subscription_manager.js"],"names":[],"mappings":"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","file":"core/components/subscription_manager.js","sourcesContent":["\nimport SubscribeEndpoints from '../endpoints/subscribe';\nimport PresenceEndpoints from '../endpoints/presence';\nimport TimeEndpoints from '../endpoints/time';\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusAnnouncement, PresenceAnnouncement } from '../flow_interfaces';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    subscribeEndpoints: SubscribeEndpoints,\n    presenceEndpoints: PresenceEndpoints,\n    timeEndpoints: TimeEndpoints,\n    config: Config,\n    crypto: Crypto,\n    listenerManager: ListenerManager\n}\n\nexport default class {\n\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n  _subscribeEndpoints: SubscribeEndpoints;\n  _presenceEndpoints: PresenceEndpoints;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _timetoken: number;\n  _region: number;\n\n  _subscribeCall: Object;\n\n  _heartbeatTimer: number;\n\n  constructor({ subscribeEndpoints, presenceEndpoints, timeEndpoints, config, crypto, listenerManager }: SubscriptionManagerConsturct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n    this._subscribeEndpoints = subscribeEndpoints;\n    this._presenceEndpoints = presenceEndpoints;\n    this._timeEndpoints = timeEndpoints;\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._timetoken = 0;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoints });\n    this._reconnectionManager.onReconnection(() => {\n      this.reconnect();\n    });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    this._presenceEndpoints.setState({ state, channels, channelGroups }, callback);\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false } = args;\n\n    if (timetoken) this._timetoken = timetoken;\n\n    channels.forEach((channel) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n    });\n\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs) {\n    const { channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) delete this._channels[channel];\n      if (channel in this._presenceChannels) delete this._presenceChannels[channel];\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) delete this._channelGroups[channelGroup];\n      if (channelGroup in this._presenceChannelGroups) delete this._channelGroups[channelGroup];\n    });\n\n    if (this._config.suppressLeaveEvents === false) {\n      this._presenceEndpoints.leave({ channels, channelGroups }, (status) => {\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    this.reconnect();\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getHeartbeatInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    let presenceChannels = Object.keys(this._channels);\n    let presenceChannelGroups = Object.keys(this._channelGroups);\n    let presenceState = {};\n\n    if (presenceChannels.length === 0 && presenceChannelGroups.length === 0) {\n      return;\n    }\n\n    presenceChannels.forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (channelState) presenceState[channel] = channelState;\n    });\n\n    presenceChannelGroups.forEach((channelGroup) => {\n      let channelGroupState = this.channelGroup[channelGroup].state;\n      if (channelGroupState) presenceState[channelGroup] = channelGroupState;\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._presenceEndpoints.heartbeat({\n      channels: presenceChannels,\n      channelGroups: presenceChannelGroups,\n      state: presenceState }, onHeartbeat.bind(this));\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach((channel) => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach((channel) => channels.push(channel + '-pnpres'));\n\n    Object.keys(this._channelGroups).forEach((channelGroup) => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach((channelGroup) => channelGroups.push(channelGroup + '-pnpres'));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      timetoken: this._timetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    };\n\n    this._subscribeCall = this._subscribeEndpoints.subscribe(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === 'PNTimeoutCategory') {\n        this._startSubscribeLoop();\n      }\n\n      // we lost internet connection, alert the reconnection manager and terminate all loops\n      if (status.category === 'PNNetworkIssuesCategory') {\n        this.disconnect();\n        this._reconnectionManager.startPolling();\n      }\n\n      return;\n    }\n\n    payload.messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // announce.state = message.payload.getData())\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n        this._listenerManager.announcePresence(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        announce.timetoken = publishMetaData.publishTimetoken;\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._timetoken = payload.metadata.timetoken;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      this._subscribeCall.abort();\n      this._subscribeCall = null;\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}