{"version":3,"sources":["file/modules/react-native.js"],"names":["PubNubFile","config","File","data","name","mimeType","type","uri","contents","e","Error","undefined","ArrayBuffer","Promise","resolve","reject","reader","FileReader","addEventListener","result","error","readAsArrayBuffer","JSON","stringify","readAsBinaryString","binary","bytes","Uint8Array","length","byteLength","i","String","fromCharCode","toString","Blob"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;;;AAoBA,IAAMA,UAAqB;AAAA;AAAA;AAAA,2BAUXC,MAVW,EAU+B;AACtD,aAAO,IAAI,IAAJ,CAASA,MAAT,CAAP;AACD;AAZwB;;AAmBzB,sBAAYA,MAAZ,EAAsD;AAAA;AAAA;AAAA;AAAA;;AACpD,QAAIA,MAAM,YAAYC,IAAtB,EAA4B;AAC1B,WAAKC,IAAL,GAAYF,MAAZ;AAEA,WAAKG,IAAL,GAAY,KAAKD,IAAL,CAAUC,IAAtB;AACA,WAAKC,QAAL,GAAgB,KAAKF,IAAL,CAAUG,IAA1B;AACD,KALD,MAKO,IAAIL,MAAM,CAACM,GAAX,EAAgB;AAErB,WAAKJ,IAAL,GAAY;AACVI,QAAAA,GAAG,EAAEN,MAAM,CAACM,GADF;AAEVH,QAAAA,IAAI,EAAEH,MAAM,CAACG,IAFH;AAGVE,QAAAA,IAAI,EAAEL,MAAM,CAACI;AAHH,OAAZ;AAMA,WAAKD,IAAL,GAAYH,MAAM,CAACG,IAAnB;;AAEA,UAAIH,MAAM,CAACI,QAAX,EAAqB;AACnB,aAAKA,QAAL,GAAgBJ,MAAM,CAACI,QAAvB;AACD;AACF,KAbM,MAaA,IAAIJ,MAAM,CAACE,IAAX,EAAiB;AACtB,UAAIK,QAAQ,GAAGP,MAAM,CAACE,IAAtB;;AAEA,UAAI;AACF,aAAKA,IAAL,GAAY,IAAID,IAAJ,CAAS,CAACM,QAAD,CAAT,EAAqBP,MAAM,CAACG,IAA5B,EAAkC;AAAEE,UAAAA,IAAI,EAAEL,MAAM,CAACI;AAAf,SAAlC,CAAZ;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AAEV,aAAKN,IAAL,GAAYK,QAAZ;AACD;;AAED,WAAKJ,IAAL,GAAYH,MAAM,CAACG,IAAnB;;AAEA,UAAIH,MAAM,CAACI,QAAX,EAAqB;AACnB,aAAKA,QAAL,GAAgBJ,MAAM,CAACI,QAAvB;AACD;AACF,KAfM,MAeA;AACL,YAAM,IAAIK,KAAJ,CAAU,+EAAV,CAAN;AACD;;AAED,QAAI,KAAKP,IAAL,KAAcQ,SAAlB,EAA6B;AAC3B,YAAM,IAAID,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAI,KAAKN,IAAL,KAAcO,SAAlB,EAA6B;AAC3B,YAAM,IAAID,KAAJ,CAAU,iEAAV,CAAN;AACD;AACF;;AAhEwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAmEjB,IAAIA,KAAJ,CAAU,yDAAV,CAnEiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAuEjB,IAAIA,KAAJ,CAAU,yDAAV,CAvEiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA2EnB,KAAKP,IAAL,IAAa,KAAKA,IAAL,CAAUI,GA3EJ;AAAA;AAAA;AAAA;;AAAA,sBA4Ef,IAAIG,KAAJ,CAAU,4DAAV,CA5Ee;;AAAA;AAAA,kDA8Ed,KAAKP,IA9ES;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAmFnB,KAAKA,IAAL,IAAa,KAAKA,IAAL,CAAUI,GAnFJ;AAAA;AAAA;AAAA;;AAAA,sBAoFf,IAAIG,KAAJ,CAAU,4DAAV,CApFe;;AAAA;AAAA,sBAqFZ,KAAKP,IAAL,YAAqBS,WArFT;AAAA;AAAA;AAAA;;AAAA,kDAsFd,KAAKT,IAtFS;;AAAA;AAAA,sBAuFZ,KAAKA,IAAL,YAAqBD,IAvFT;AAAA;AAAA;AAAA;;AAAA,kDAwFd,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AAEAD,kBAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AACpC,wBAAIF,MAAM,CAACG,MAAP,YAAyBP,WAA7B,EAA0C;AACxC,6BAAOE,OAAO,CAACE,MAAM,CAACG,MAAR,CAAd;AACD;AACF,mBAJD;AAMAH,kBAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACrCH,oBAAAA,MAAM,CAACC,MAAM,CAACI,KAAR,CAAN;AACD,mBAFD;AAIAJ,kBAAAA,MAAM,CAACK,iBAAP,CAAyB,KAAI,CAAClB,IAA9B;AACD,iBAdM,CAxFc;;AAAA;AAAA,sBAwGf,IAAIO,KAAJ,CAAU,uDAAV,CAxGe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA6GnB,KAAKP,IAAL,IAAa,KAAKA,IAAL,CAAUI,GA7GJ;AAAA;AAAA;AAAA;;AAAA,kDA8Gde,IAAI,CAACC,SAAL,CAAe,KAAKpB,IAApB,CA9Gc;;AAAA;AAAA,sBA+GZ,KAAKA,IAAL,YAAqBD,IA/GT;AAAA;AAAA;AAAA;;AAAA,kDAgHd,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AAEAD,kBAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AACpC,wBAAI,OAAOF,MAAM,CAACG,MAAd,KAAyB,QAA7B,EAAuC;AACrC,6BAAOL,OAAO,CAACE,MAAM,CAACG,MAAR,CAAd;AACD;AACF,mBAJD;AAMAH,kBAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACrCH,oBAAAA,MAAM,CAACC,MAAM,CAACI,KAAR,CAAN;AACD,mBAFD;AAIAJ,kBAAAA,MAAM,CAACQ,kBAAP,CAA0B,MAAI,CAACrB,IAA/B;AACD,iBAdM,CAhHc;;AAAA;AAAA,sBA+HZ,KAAKA,IAAL,YAAqBS,WA/HT;AAAA;AAAA;AAAA;;AAgIjBa,gBAAAA,MAhIiB,GAgIR,EAhIQ;AAiIjBC,gBAAAA,KAjIiB,GAiIT,IAAIC,UAAJ,CAAe,KAAKxB,IAApB,CAjIS;AAkIjByB,gBAAAA,MAlIiB,GAkIRF,KAAK,CAACG,UAlIE;;AAmIrB,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,IAAI,CAAjC,EAAoC;AAClCL,kBAAAA,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBN,KAAK,CAACI,CAAD,CAAzB,CAAV;AACD;;AArIoB,kDAsIdL,MAtIc;;AAAA;AAAA,kDAwId,KAAKtB,IAAL,IAAa,KAAKA,IAAL,CAAU8B,QAAV,EAxIC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA6InB,KAAK9B,IAAL,CAAUI,GA7IS;AAAA;AAAA;AAAA;;AAAA,sBA8If,IAAIG,KAAJ,CAAU,4DAAV,CA9Ie;;AAAA;AAAA,kDAgJd,KAAKP,IAhJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAqJnB,KAAKA,IAAL,IAAa,KAAKA,IAAL,CAAUI,GArJJ;AAAA;AAAA;AAAA;;AAAA,kDAsJd,KAAKJ,IAtJS;;AAAA;AAAA,sBAwJf,IAAIO,KAAJ,CAAU,wBAAV,CAxJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8DACH,OAAOR,IAAP,KAAgB,WADb,4DAEH,OAAOgC,IAAP,KAAgB,WAFb,mEAGI,OAAOtB,WAAP,KAAuB,WAH3B,8DAID,KAJC,8DAKD,KALC,8DAMD,IANC,mEAOI,IAPJ,+DAQA,IARA,SAA3B;eA6JeZ,U","sourcesContent":["/** @flow */\n\nimport { IFile, FileClass } from '../';\n\ntype PubNubFileReactNativeConstructor =\n| File\n| {|\n    data: string,\n    name: string,\n    mimeType: string,\n  |}\n| {|\n    data: ArrayBuffer,\n    name: string,\n    mimeType: string,\n  |}\n| {|\n    uri: string,\n    name: string,\n    mimeType: string,\n  |};\n\nconst PubNubFile: FileClass = class PubNubFile implements IFile {\n  static supportsFile = typeof File !== 'undefined';\n  static supportsBlob = typeof Blob !== 'undefined';\n  static supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';\n  static supportsBuffer = false;\n  static supportsStream = false;\n  static supportsString = true;\n  static supportsEncryptFile = true;\n  static supportsFileUri = true;\n\n  static create(config: PubNubFileReactNativeConstructor) {\n    return new this(config);\n  }\n\n  data: any;\n\n  name: string;\n  mimeType: string;\n\n  constructor(config: PubNubFileReactNativeConstructor) {\n    if (config instanceof File) {\n      this.data = config;\n\n      this.name = this.data.name;\n      this.mimeType = this.data.type;\n    } else if (config.uri) {\n      // uri upload for react native\n      this.data = {\n        uri: config.uri,\n        name: config.name,\n        type: config.mimeType\n      };\n\n      this.name = config.name;\n\n      if (config.mimeType) {\n        this.mimeType = config.mimeType;\n      }\n    } else if (config.data) {\n      let contents = config.data;\n\n      try {\n        this.data = new File([contents], config.name, { type: config.mimeType });\n      } catch (e) {\n        // fallback to store the ArrayBuffer Directly when File does not support it.\n        this.data = contents;\n      }\n\n      this.name = config.name;\n\n      if (config.mimeType) {\n        this.mimeType = config.mimeType;\n      }\n    } else {\n      throw new Error(\"Couldn't construct a file out of supplied options. URI or file data required.\");\n    }\n\n    if (this.data === undefined) {\n      throw new Error(\"Couldn't construct a file out of supplied options.\");\n    }\n\n    if (this.name === undefined) {\n      throw new Error(\"Couldn't guess filename out of the options. Please provide one.\");\n    }\n  }\n\n  async toBuffer() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toStream() {\n    throw new Error('This feature is only supported in Node.js environments.');\n  }\n\n  async toBlob() {\n    if (this.data && this.data.uri) {\n      throw new Error('This is a file URI and does not contain the file contents.');\n    } else {\n      return this.data;\n    }\n  }\n\n  async toArrayBuffer() {\n    if (this.data && this.data.uri) {\n      throw new Error('This is a file URI and does not contain the file contents.');\n    } else if (this.data instanceof ArrayBuffer) {\n      return this.data;\n    } else if (this.data instanceof File) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('load', () => {\n          if (reader.result instanceof ArrayBuffer) {\n            return resolve(reader.result);\n          }\n        });\n\n        reader.addEventListener('error', () => {\n          reject(reader.error);\n        });\n\n        reader.readAsArrayBuffer(this.data);\n      });\n    } else {\n      throw new Error('Unable to construct an ArrayBuffer from the contents.');\n    }\n  }\n\n  async toString() {\n    if (this.data && this.data.uri) {\n      return JSON.stringify(this.data);\n    } else if (this.data instanceof File) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.addEventListener('load', () => {\n          if (typeof reader.result === 'string') {\n            return resolve(reader.result);\n          }\n        });\n\n        reader.addEventListener('error', () => {\n          reject(reader.error);\n        });\n\n        reader.readAsBinaryString(this.data);\n      });\n    } else if (this.data instanceof ArrayBuffer) {\n      let binary = '';\n      let bytes = new Uint8Array(this.data);\n      let length = bytes.byteLength;\n      for (let i = 0; i < length; i += 1) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return binary;\n    } else {\n      return this.data && this.data.toString();\n    }\n  }\n\n  async toFile() {\n    if (this.data.uri) {\n      throw new Error('This is a file URI and does not contain the file contents.');\n    } else {\n      return this.data;\n    }\n  }\n\n  async toFileUri() {\n    if (this.data && this.data.uri) {\n      return this.data;\n    } else {\n      throw new Error('This is not a file URI');\n    }\n  }\n};\n\nexport default PubNubFile;\n"],"file":"react-native.js"}