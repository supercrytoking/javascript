{"version":3,"sources":["core/endpoints/publish.js"],"names":["getOperation","validateParams","usePost","getURL","postURL","getRequestTimeout","isAuthSupported","postPayload","prepareParams","handleResponse","prepareMessagePayload","modules","messagePayload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","PNPublishOperation","incomingParams","message","channel","subscribeKey","sendByPost","publishKey","encodeURIComponent","getTransactionTimeout","meta","replicate","storeInHistory","params","store","norep","serverResponse","timetoken"],"mappings":"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","file":"core/endpoints/publish.js","sourcesContent":["/* @flow */\n\nimport { PublishResponse, PublishArguments, ModulesInject } from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNPublishOperation;\n}\n\nexport function validateParams({ config}: ModulesInject, incomingParams: PublishArguments) {\n  let { message, channel } = incomingParams;\n\n  if (!channel) return 'Missing Channel';\n  if (!message) return 'Missing Message';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function usePost(modules: ModulesInject, incomingParams: PublishArguments) {\n  let { sendByPost = false } = incomingParams;\n  return sendByPost;\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: PublishArguments): string {\n  const { config } = modules;\n  const { channel, message } = incomingParams;\n  let stringifiedPayload = prepareMessagePayload(modules, message);\n  return '/publish/' + config.publishKey + '/' + config.subscribeKey + '/0/' + encodeURIComponent(channel) + '/0/' + encodeURIComponent(stringifiedPayload);\n}\n\nexport function postURL(modules: ModulesInject, incomingParams: PublishArguments): string {\n  const { config } = modules;\n  const { channel } = incomingParams;\n  return '/publish/' + config.publishKey + '/' + config.subscribeKey + '/0/' + encodeURIComponent(channel) + '/0';\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function postPayload(modules: ModulesInject, incomingParams: PublishArguments): string {\n  const { message } = incomingParams;\n  return prepareMessagePayload(modules, message);\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: PublishArguments): Object {\n  const { meta, replicate = true, storeInHistory } = incomingParams;\n  const params = {};\n\n  if (storeInHistory != null) {\n    if (storeInHistory) {\n      params.store = '1';\n    } else {\n      params.store = '0';\n    }\n  }\n\n  if (replicate === false) {\n    params.norep = 'true';\n  }\n\n  if (meta && typeof meta === 'object') {\n    params.meta = JSON.stringify(meta);\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): PublishResponse {\n  return { timetoken: serverResponse[2] };\n}\n"],"sourceRoot":"/source/"}