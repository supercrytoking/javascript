{"version":3,"sources":["core/components/subscription_manager.js"],"names":[],"mappings":"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","file":"core/components/subscription_manager.js","sourcesContent":["\nimport SubscribeEndpoints from '../endpoints/subscribe';\nimport PresenceEndpoints from '../endpoints/presence';\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusStruct, CallbackStruct, PresenceAnnouncement } from '../flow_interfaces';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    subscribeEndpoints: SubscribeEndpoints,\n    presenceEndpoints: PresenceEndpoints,\n    config: Config,\n    crypto: Crypto\n}\n\nexport default class {\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _timetoken: number;\n  _region: number;\n\n  _subscribeCall: Object;\n\n  _subscribeEndpoints: SubscribeEndpoints;\n  _presenceEndpoints: PresenceEndpoints;\n\n  _listeners: Array<CallbackStruct>;\n\n  _heartbeatTimer: number;\n\n  constructor({ subscribeEndpoints, presenceEndpoints, config, crypto }: SubscriptionManagerConsturct) {\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._config = config;\n    this._subscribeEndpoints = subscribeEndpoints;\n    this._presenceEndpoints = presenceEndpoints;\n    this._crypto = crypto;\n\n    this._timetoken = 0;\n\n    this._listeners = [];\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    this._presenceEndpoints.setState({ state, channels, channelGroups }, callback);\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false } = args;\n\n    if (timetoken) this._timetoken = timetoken;\n\n    channels.forEach((channel) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n    });\n\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs) {\n    const { channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) delete this._channels[channel];\n      if (channel in this._presenceChannels) delete this._presenceChannels[channel];\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) delete this._channelGroups[channelGroup];\n      if (channelGroup in this._presenceChannelGroups) delete this._channelGroups[channelGroup];\n    });\n\n    if (this._config.suppressLeaveEvents === false) {\n      this._presenceEndpoints.leave({ channels, channelGroups }, (status) => {\n        this._announceStatus(status);\n      });\n    }\n\n    this.reconnect();\n  }\n\n  addListener(newListeners: CallbackStruct) {\n    this._listeners.push(newListeners);\n  }\n\n  removeListener(deprecatedListeners: CallbackStruct) {\n    const listenerPosition = this._listeners.indexOf(deprecatedListeners);\n    if (listenerPosition > -1) this._listeners = this._listeners.splice(listenerPosition, 1);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getPresenceAnnounceInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    let presenceChannels = Object.keys(this._channels);\n    let presenceChannelGroups = Object.keys(this._channelGroups);\n    let presenceState = {};\n\n    if (presenceChannels.length === 0 && presenceChannelGroups.length === 0) {\n      return;\n    }\n\n    presenceChannels.forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (channelState) presenceState[channel] = channelState;\n    });\n\n    presenceChannelGroups.forEach((channelGroup) => {\n      let channelGroupState = this.channelGroup[channelGroup].state;\n      if (channelGroupState) presenceState[channelGroup] = channelGroupState;\n    });\n\n    this._presenceEndpoints.heartbeat({\n      channels: presenceChannels,\n      channelGroups: presenceChannelGroups,\n      state: presenceState },\n        (status) => {\n          console.log(status); // eslint-disable-line no-console\n        });\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach((channel) => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach((channel) => channels.push(channel + '-pnpres'));\n\n    Object.keys(this._channelGroups).forEach((channelGroup) => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach((channelGroup) => channelGroups.push(channelGroup + '-pnpres'));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    this._subscribeCall = this._subscribeEndpoints.subscribe({ channels, channelGroups,\n      timetoken: this._timetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    }, (status: StatusStruct, payload: SubscribeEnvelope) => {\n      if (status.error) {\n        this._startSubscribeLoop();\n        return;\n      }\n\n      payload.messages.forEach((message) => {\n        let channel = message.channel;\n        let subscriptionMatch = message.subscriptionMatch;\n        let publishMetaData = message.publishMetaData;\n\n        if (channel === subscriptionMatch) {\n          subscriptionMatch = null;\n        }\n\n        if (utils.endsWith(message.channel, '-pnpres')) {\n          let announce: PresenceAnnouncement = {};\n          announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n          announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n          // announce.state = message.payload.getData())\n          announce.timetoken = publishMetaData.publishTimetoken;\n          announce.occupancy = message.payload.occupancy;\n          announce.uuid = message.payload.uuid;\n          announce.timestamp = message.payload.timestamp;\n          this._announcePresence(announce);\n        } else {\n          let announce: MessageAnnouncement = {};\n          announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n          announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n          announce.timetoken = publishMetaData.publishTimetoken;\n\n          if (this._config.cipherKey) {\n            announce.message = this._crypto.decrypt(message.payload);\n          } else {\n            announce.message = message.payload;\n          }\n\n          this._announceMessage(announce);\n        }\n      });\n\n      this._region = payload.metadata.region;\n      this._timetoken = payload.metadata.timetoken;\n      this._startSubscribeLoop();\n    });\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      this._subscribeCall.abort();\n      this._subscribeCall = null;\n    }\n  }\n\n  _announcePresence(announce: PresenceAnnouncement) {\n    this._listeners.forEach((listener) => {\n      if (listener.presence) listener.presence(announce);\n    });\n  }\n\n  _announceStatus(announce) {\n    this._listeners.forEach((listener) => {\n      if (listener.status) listener.status(announce);\n    });\n  }\n\n  _announceMessage(announce: MessageAnnouncement) {\n    this._listeners.forEach((listener) => {\n      if (listener.message) listener.message(announce);\n    });\n  }\n\n}\n"],"sourceRoot":"/source/"}