{"version":3,"sources":["core/endpoints/channel_groups/list_channels.js"],"names":[],"mappings":";;;;;QAIgB,Y,GAAA,Y;QAIA,c,GAAA,c;QAQA,M,GAAA,M;QAMA,a,GAAA,a;QAIA,c,GAAA,c;;AAxBhB;;AAEO,SAAS,YAAT,GAAgC;AACrC,SAAO,6BAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC,cAAjC,EAAqE;AAAA,MACpE,YADoE,GACnD,cADmD,CACpE,YADoE;AAAA,MAEpE,MAFoE,GAEzD,OAFyD,CAEpE,MAFoE;;;AAI1E,MAAI,CAAC,YAAL,EAAmB,OAAO,uBAAP;AACnB,MAAI,CAAC,OAAO,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAAS,MAAT,CAAgB,OAAhB,EAAyB,cAAzB,EAAqE;AAAA,MACpE,YADoE,GACnD,cADmD,CACpE,YADoE;AAAA,MAEpE,MAFoE,GAEzD,OAFyD,CAEpE,MAFoE;;AAG1E,SAAO,sCAAsC,OAAO,YAA7C,GAA4D,iBAA5D,GAAgF,YAAvF;AACD;;AAEM,SAAS,aAAT,GAAiC;AACtC,SAAO,EAAP;AACD;;AAEM,SAAS,cAAT,CAAwB,OAAxB,EAAiC,OAAjC,EAAgE;AACrE,SAAO;AACL,cAAU,QAAQ,OAAR,CAAgB;AADrB,GAAP;AAGD","file":"core/endpoints/channel_groups/list_channels.js","sourcesContent":["/* @flow */\n\nimport { ListChannelsParams, ListChannelsResponse } from '../../flow_interfaces';\n\nexport function getOperation(): string {\n  return 'PNChannelsForGroupOperation';\n}\n\nexport function validateParams(modules, incomingParams: ListChannelsParams) {\n  let { channelGroup } = incomingParams;\n  let { config } = modules;\n\n  if (!channelGroup) return 'Missing Channel Group';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules, incomingParams: ListChannelsParams): string {\n  let { channelGroup } = incomingParams;\n  let { config } = modules;\n  return '/v1/channel-registration/sub-key/' + config.subscribeKey + '/channel-group/' + channelGroup;\n}\n\nexport function prepareParams(): Object {\n  return {};\n}\n\nexport function handleResponse(modules, payload): ListChannelsResponse {\n  return {\n    channels: payload.payload.channels\n  };\n}\n\n\n/*\n\nlistChannels(args: ListChannelsParams, callback: Function) {\n  let { channelGroup } = args;\n\n  const endpointConfig: EndpointDefinition = {\n    params: {\n      authKey: { required: false },\n      subscribeKey: { required: true }\n    },\n    url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group/' + channelGroup,\n    operation: 'PNChannelsForGroupOperation'\n  };\n\n  if (!channelGroup) return callback(this.createValidationError('Missing Channel Group'));\n\n  // validate this request and return false if stuff is missing\n  if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n  // create base params\n  const params = this.createBaseParams(endpointConfig);\n\n  this.networking.GET(params, endpointConfig, (status: StatusAnnouncement, payload: Object) => {\n    if (status.error) return callback(status);\n    let response: ListChannelsResponse = {\n      channels: payload.payload.channels\n    };\n\n    callback(status, response);\n  });\n}\n\n*/\n"],"sourceRoot":"/source/"}