{"version":3,"sources":["core/endpoints/channel_groups.js"],"names":[],"mappings":"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","file":"core/endpoints/channel_groups.js","sourcesContent":["/* @flow */\n\nimport BaseEndoint from './base.js';\nimport Networking from '../components/networking';\nimport Config from '../components/config';\nimport Logger from '../components/logger';\n\nimport { endpointDefinition, statusStruct } from '../flow_interfaces';\n\ntype channelGroupConstruct = {\n  networking: Networking,\n  config: Config\n};\n\ntype listChannelsParams = {\n  channelGroup: string,\n}\n\ntype deleteGroupParams = {\n  channelGroup: string,\n}\n\ntype addChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\ntype removeChannelParams = {\n  channels: Array<string>,\n  channelGroup: string,\n}\n\n\ntype listAllGroupsResponse = {\n  groups: Array<string>\n}\n\ntype listChannelsResponse = {\n  channels: Array<string>\n}\n\nexport default class extends BaseEndoint {\n  networking: Networking;\n  config: Config;\n  logger: Logger;\n\n  constructor({ networking, config }: channelGroupConstruct) {\n    super({ config });\n    this.networking = networking;\n    this.config = config;\n    this.logger = Logger.getLogger('#endpoints/channel_groups');\n  }\n\n  listChannels(args: listChannelsParams, callback: Function) {\n    let { channelGroup } = args;\n\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: { required: false },\n        subscribeKey: { required: true }\n      },\n      url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group/' + channelGroup\n    };\n\n    if (!channelGroup) return callback(this._r.validationError('Missing Channel Group'));\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n      let response: listChannelsResponse = {\n        channels: payload.payload.channels\n      };\n\n      callback(status, response);\n    });\n  }\n\n  deleteGroup(args: deleteGroupParams, callback: Function) {\n    let { channelGroup } = args;\n\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: { required: false },\n        subscribeKey: { required: true }\n      },\n      url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group/' + channelGroup + '/remove'\n    };\n\n    if (!channelGroup) return callback(this._r.validationError('Missing Channel Group'));\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct) => {\n      callback(status);\n    });\n  }\n\n  listGroups(callback: Function) {\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: { required: false },\n        subscribeKey: { required: true }\n      },\n      url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group'\n    };\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let response: listAllGroupsResponse = {\n        groups: payload.payload.groups\n      };\n\n      callback(status, response);\n    });\n  }\n\n  addChannels(args: addChannelParams, callback: Function) {\n    let { channelGroup, channels = [] } = args;\n\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: { required: false },\n        subscribeKey: { required: true }\n      },\n      url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group/' + channelGroup\n    };\n\n    if (!channelGroup) return callback(this._r.validationError('Missing Channel Group'));\n    if (channels.length === 0) return callback(this._r.validationError('Missing Channel'));\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n    params.add = channels.join(',');\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct) => {\n      callback(status);\n    });\n  }\n\n  removeChannels(args: removeChannelParams, callback: Function) {\n    let { channelGroup, channels = [] } = args;\n\n    const endpointConfig: endpointDefinition = {\n      params: {\n        authKey: { required: false },\n        uuid: { required: false },\n        subscribeKey: { required: true }\n      },\n      url: '/v1/channel-registration/sub-key/' + this.config.subscribeKey + '/channel-group/' + channelGroup\n    };\n\n    if (!channelGroup) return callback(this._r.validationError('Missing Channel Group'));\n    if (channels.length === 0) return callback(this._r.validationError('Missing Channel'));\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n    params.remove = channels.join(',');\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct) => {\n      callback(status);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}