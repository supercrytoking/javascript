{"version":3,"sources":["core/endpoints/objects/channel/remove.js"],"names":["endpoint","getOperation","operationConstants","PNRemoveChannelMetadataOperation","validateParams","_","params","channel","getURL","config","subscribeKey","utils","encodeString","useDelete","getRequestTimeout","getTransactionTimeout","isAuthSupported","getAuthToken","tokenManager","getToken","prepareParams","handleResponse","response","status","data"],"mappings":";;;;;;;;;AAGA;;AAEA;;AAWA,IAAMA,QAAkF,GAAG;AACzFC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,gCAAzB;AAAA,GAD2E;AAGzFC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,yBAAP;AACD;AACF,GAPwF;AASzFC,EAAAA,MAAM,EAAE,sBAAaF,MAAb;AAAA,QAAGG,MAAH,QAAGA,MAAH;AAAA,iCAAuCA,MAAM,CAACC,YAA9C,uBAAuEC,kBAAMC,YAAN,CAAmBN,MAAM,CAACC,OAA1B,CAAvE;AAAA,GATiF;AAUzFM,EAAAA,SAAS,EAAE;AAAA,WAAM,IAAN;AAAA,GAV8E;AAYzFC,EAAAA,iBAAiB,EAAE;AAAA,QAAGL,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACM,qBAAP,EAAhB;AAAA,GAZsE;AAczFC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAdwE;AAgBzFC,EAAAA,YAAY,EAAE;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WAAsBA,YAAY,CAACC,QAAb,CAAsB,SAAtB,CAAtB;AAAA,GAhB2E;AAkBzFC,EAAAA,aAAa,EAAE;AAAA,WAAO,EAAP;AAAA,GAlB0E;AAoBzFC,EAAAA,cAAc,EAAE,wBAAChB,CAAD,EAAIiB,QAAJ;AAAA,WAAkB;AAChCC,MAAAA,MAAM,EAAED,QAAQ,CAACC,MADe;AAEhCC,MAAAA,IAAI,EAAEF,QAAQ,CAACE;AAFiB,KAAlB;AAAA;AApByE,CAA3F;eA0BexB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig } from '../../endpoint';\nimport operationConstants from '../../../constants/operations';\nimport type { ChannelMetadata } from './channel';\nimport utils from '../../../utils';\n\nexport type RemoveChannelMetadataParams = {|\n  channel: string,\n|};\n\nexport type RemoveChannelMetadataResult = {|\n  status: 200,\n  data: ChannelMetadata,\n|};\n\nconst endpoint: EndpointConfig<RemoveChannelMetadataParams, RemoveChannelMetadataResult> = {\n  getOperation: () => operationConstants.PNRemoveChannelMetadataOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return 'Channel cannot be empty';\n    }\n  },\n\n  getURL: ({ config }, params) => `/v2/objects/${config.subscribeKey}/channels/${utils.encodeString(params.channel)}`,\n  useDelete: () => true,\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  getAuthToken: ({ tokenManager }) => tokenManager.getToken('channel'),\n\n  prepareParams: () => ({}),\n\n  handleResponse: (_, response) => ({\n    status: response.status,\n    data: response.data,\n  }),\n};\n\nexport default endpoint;\n"],"file":"remove.js"}