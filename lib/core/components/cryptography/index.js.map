{"version":3,"sources":["core/components/cryptography/index.js"],"names":["config","_config","_iv","_allowedKeyEncodings","_allowedKeyLengths","_allowedModes","_defaultOptions","encryptKey","keyEncoding","keyLength","mode","data","hash","HmacSHA256","secretKey","toString","enc","Base64","s","SHA256","Hex","incomingOptions","options","hasOwnProperty","indexOf","toLowerCase","parseInt","key","parse","_decodeKey","Utf8","slice","ECB","CBC","customCipherKey","customEncrypt","pnEncrypt","customDecrypt","pnDecrypt","cipherKey","_parseOptions","iv","_getIV","_getMode","_getPaddedKey","encryptedHexArray","AES","encrypt","ciphertext","base64Encrypted","plainJSON","decrypt","plaintext","JSON","e"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport Config from '../config';\nimport CryptoJS from './hmac-sha256';\n\ntype CryptoConstruct = {\n  config: Config,\n}\n\nexport default class {\n\n  _config: Config;\n  _iv: string;\n  _allowedKeyEncodings: Array<string>;\n  _allowedKeyLengths: Array<number>;\n  _allowedModes: Array<string>;\n  _defaultOptions: Object;\n\n  constructor({ config }: CryptoConstruct) {\n    this._config = config;\n\n    this._iv = '0123456789012345';\n\n    this._allowedKeyEncodings = ['hex', 'utf8', 'base64', 'binary'];\n    this._allowedKeyLengths = [128, 256];\n    this._allowedModes = ['ecb', 'cbc'];\n\n    this._defaultOptions = {\n      encryptKey: true,\n      keyEncoding: 'utf8',\n      keyLength: 256,\n      mode: 'cbc'\n    };\n  }\n\n  HMACSHA256(data: string): string {\n    let hash = CryptoJS.HmacSHA256(data, this._config.secretKey);\n    return hash.toString(CryptoJS.enc.Base64);\n  }\n\n  SHA256(s: string): string {\n    return CryptoJS.SHA256(s).toString(CryptoJS.enc.Hex);\n  }\n\n  _parseOptions(incomingOptions: ?Object): Object {\n    // Defaults\n    let options = incomingOptions || {};\n    if (!options.hasOwnProperty('encryptKey')) options.encryptKey = this._defaultOptions.encryptKey;\n    if (!options.hasOwnProperty('keyEncoding')) options.keyEncoding = this._defaultOptions.keyEncoding;\n    if (!options.hasOwnProperty('keyLength')) options.keyLength = this._defaultOptions.keyLength;\n    if (!options.hasOwnProperty('mode')) options.mode = this._defaultOptions.mode;\n\n    // Validation\n    if (this._allowedKeyEncodings.indexOf(options.keyEncoding.toLowerCase()) === -1) {\n      options.keyEncoding = this._defaultOptions.keyEncoding;\n    }\n\n    if (this._allowedKeyLengths.indexOf(parseInt(options.keyLength, 10)) === -1) {\n      options.keyLength = this._defaultOptions.keyLength;\n    }\n\n    if (this._allowedModes.indexOf(options.mode.toLowerCase()) === -1) {\n      options.mode = this._defaultOptions.mode;\n    }\n\n    return options;\n  }\n\n  _decodeKey(key: string, options: Object): string {\n    if (options.keyEncoding === 'base64') {\n      return CryptoJS.enc.Base64.parse(key);\n    } else if (options.keyEncoding === 'hex') {\n      return CryptoJS.enc.Hex.parse(key);\n    } else {\n      return key;\n    }\n  }\n\n  _getPaddedKey(key: string, options: Object): string {\n    key = this._decodeKey(key, options);\n    if (options.encryptKey) {\n      return CryptoJS.enc.Utf8.parse(this.SHA256(key).slice(0, 32));\n    } else {\n      return key;\n    }\n  }\n\n  _getMode(options: Object): string {\n    if (options.mode === 'ecb') {\n      return CryptoJS.mode.ECB;\n    } else {\n      return CryptoJS.mode.CBC;\n    }\n  }\n\n  _getIV(options: Object): string | null {\n    return (options.mode === 'cbc') ? CryptoJS.enc.Utf8.parse(this._iv) : null;\n  }\n\n  encrypt(data: string, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (this._config.customEncrypt) {\n      return this._config.customEncrypt(data);\n    } else {\n      return this.pnEncrypt(data, customCipherKey, options);\n    }\n  }\n\n  decrypt(data: Object, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (this._config.customDecrypt) {\n      return this._config.customDecrypt(data);\n    } else {\n      return this.pnDecrypt(data, customCipherKey, options);\n    }\n  }\n\n  pnEncrypt(data: string, customCipherKey: ?string, options: ?Object): Object | string | null {\n    if (!customCipherKey && !this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let iv = this._getIV(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(customCipherKey || this._config.cipherKey, options);\n    let encryptedHexArray = CryptoJS.AES.encrypt(data, cipherKey, { iv, mode }).ciphertext;\n    let base64Encrypted = encryptedHexArray.toString(CryptoJS.enc.Base64);\n    return base64Encrypted || data;\n  }\n\n  pnDecrypt(data: Object, customCipherKey: ?string, options: ?Object): Object | null {\n    if (!customCipherKey && !this._config.cipherKey) return data;\n    options = this._parseOptions(options);\n    let iv = this._getIV(options);\n    let mode = this._getMode(options);\n    let cipherKey = this._getPaddedKey(customCipherKey || this._config.cipherKey, options);\n    try {\n      let ciphertext = CryptoJS.enc.Base64.parse(data);\n      let plainJSON = CryptoJS.AES.decrypt({ ciphertext }, cipherKey, { iv, mode }).toString(CryptoJS.enc.Utf8);\n      let plaintext = JSON.parse(plainJSON);\n      return plaintext;\n    } catch (e) {\n      return null;\n    }\n  }\n\n}\n"]}