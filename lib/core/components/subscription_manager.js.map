{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_crypto","_channels","_presenceChannels","_channelGroups","_presenceChannelGroups","_timetoken","_subscriptionStatusAnnounced","_reconnectionManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","timetoken","withPresence","reconnect","suppressLeaveEvents","status","announceStatus","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","Object","keys","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","getHeartbeatInterval","clearInterval","presenceChannels","presenceChannelGroups","presenceState","length","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","announceSuccessfulHeartbeats","push","subscribeArgs","filterExpression","region","_region","_subscribeCall","_processSubscribeResponse","payload","category","disconnect","onReconnection","reconnectedAnnounce","operation","startPolling","connectedAnnounce","messages","message","subscriptionMatch","publishMetaData","endsWith","announce","actualChannel","subscribedChannel","action","data","publishTimetoken","occupancy","uuid","timestamp","announcePresence","cipherKey","decrypt","announceMessage","metadata","abort"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAsDE,wBAAoK;AAAA,QAAtJA,iBAAsJ,QAAtJA,iBAAsJ;AAAA,QAAnIC,aAAmI,QAAnIA,aAAmI;AAAA,QAApHC,iBAAoH,QAApHA,iBAAoH;AAAA,QAAjGC,gBAAiG,QAAjGA,gBAAiG;AAAA,QAA/EC,YAA+E,QAA/EA,YAA+E;AAAA,QAAjEC,MAAiE,QAAjEA,MAAiE;AAAA,QAAzDC,MAAyD,QAAzDA,MAAyD;AAAA,QAAjDC,eAAiD,QAAjDA,eAAiD;;AAAA;;AAClK,SAAKC,gBAAL,GAAwBD,eAAxB;AACA,SAAKE,OAAL,GAAeJ,MAAf;;AAEA,SAAKK,cAAL,GAAsBT,aAAtB;AACA,SAAKU,kBAAL,GAA0BT,iBAA1B;AACA,SAAKU,iBAAL,GAAyBT,gBAAzB;AACA,SAAKU,kBAAL,GAA0Bb,iBAA1B;;AAEA,SAAKc,OAAL,GAAeR,MAAf;;AAEA,SAAKS,SAAL,GAAiB,EAAjB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;;AAEA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,sBAAL,GAA8B,EAA9B;;AAEA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,4BAAL,GAAoC,KAApC;;AAEA,SAAKC,oBAAL,GAA4B,mCAAwB,EAAEjB,0BAAF,EAAxB,CAA5B;AACD;;;;qCAEgBkB,I,EAAiBC,Q,EAAoB;AAAA;;AAAA,UAC5CC,KAD4C,GACCF,IADD,CAC5CE,KAD4C;AAAA,2BACCF,IADD,CACrCG,QADqC;AAAA,UACrCA,QADqC,kCAC1B,EAD0B;AAAA,gCACCH,IADD,CACtBI,aADsB;AAAA,UACtBA,aADsB,uCACN,EADM;;;AAGpDD,eAASE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,YAAIA,WAAW,MAAKb,SAApB,EAA+B,MAAKA,SAAL,CAAea,OAAf,EAAwBJ,KAAxB,GAAgCA,KAAhC;AAChC,OAFD;;AAIAE,oBAAcC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,YAAIA,gBAAgB,MAAKZ,cAAzB,EAAyC,MAAKA,cAAL,CAAoBY,YAApB,EAAkCL,KAAlC,GAA0CA,KAA1C;AAC1C,OAFD;;AAIA,WAAKZ,iBAAL,CAAuB,EAAEY,YAAF,EAASC,kBAAT,EAAmBC,4BAAnB,EAAvB,EAA2DH,QAA3D;AACD;;;yCAEoBD,I,EAAqB;AAAA;;AAAA,UAChCQ,SADgC,GACuCR,IADvC,CAChCQ,SADgC;AAAA,4BACuCR,IADvC,CACrBG,QADqB;AAAA,UACrBA,QADqB,mCACV,EADU;AAAA,iCACuCH,IADvC,CACNI,aADM;AAAA,UACNA,aADM,wCACU,EADV;AAAA,+BACuCJ,IADvC,CACcS,YADd;AAAA,UACcA,YADd,sCAC6B,KAD7B;;;AAGxC,UAAID,SAAJ,EAAe,KAAKX,UAAL,GAAkBW,SAAlB;;AAEfL,eAASE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,eAAKb,SAAL,CAAea,OAAf,IAA0B,EAAEJ,OAAO,EAAT,EAA1B;AACA,YAAIO,YAAJ,EAAkB,OAAKf,iBAAL,CAAuBY,OAAvB,IAAkC,EAAlC;AACnB,OAHD;;AAKAF,oBAAcC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,eAAKZ,cAAL,CAAoBY,YAApB,IAAoC,EAAEL,OAAO,EAAT,EAApC;AACA,YAAIO,YAAJ,EAAkB,OAAKb,sBAAL,CAA4BW,YAA5B,IAA4C,EAA5C;AACnB,OAHD;;AAKA,WAAKT,4BAAL,GAAoC,KAApC;AACA,WAAKY,SAAL;AACD;;;2CAEsBV,I,EAAuB;AAAA;;AAAA,4BACEA,IADF,CACpCG,QADoC;AAAA,UACpCA,QADoC,mCACzB,EADyB;AAAA,iCACEH,IADF,CACrBI,aADqB;AAAA,UACrBA,aADqB,wCACL,EADK;;;AAG5CD,eAASE,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5B,YAAIA,WAAW,OAAKb,SAApB,EAA+B,OAAO,OAAKA,SAAL,CAAea,OAAf,CAAP;AAC/B,YAAIA,WAAW,OAAKZ,iBAApB,EAAuC,OAAO,OAAKA,iBAAL,CAAuBY,OAAvB,CAAP;AACxC,OAHD;;AAKAF,oBAAcC,OAAd,CAAsB,UAACE,YAAD,EAAkB;AACtC,YAAIA,gBAAgB,OAAKZ,cAAzB,EAAyC,OAAO,OAAKA,cAAL,CAAoBY,YAApB,CAAP;AACzC,YAAIA,gBAAgB,OAAKX,sBAAzB,EAAiD,OAAO,OAAKD,cAAL,CAAoBY,YAApB,CAAP;AAClD,OAHD;;AAKA,UAAI,KAAKpB,OAAL,CAAawB,mBAAb,KAAqC,KAAzC,EAAgD;AAC9C,aAAKvB,cAAL,CAAoB,EAAEe,kBAAF,EAAYC,4BAAZ,EAApB,EAAiD,UAACQ,MAAD,EAAY;AAC3D,iBAAK1B,gBAAL,CAAsB2B,cAAtB,CAAqCD,MAArC;AACD,SAFD;AAGD;;AAED,WAAKF,SAAL;AACD;;;qCAEgB;AACf,WAAKI,sBAAL,CAA4B,EAAEX,UAAU,KAAKY,qBAAL,EAAZ,EAA0CX,eAAe,KAAKY,0BAAL,EAAzD,EAA5B;AACD;;;4CAEuB;AACtB,aAAOC,OAAOC,IAAP,CAAY,KAAKzB,SAAjB,CAAP;AACD;;;iDAE4B;AAC3B,aAAOwB,OAAOC,IAAP,CAAY,KAAKvB,cAAjB,CAAP;AACD;;;gCAEW;AACV,WAAKwB,mBAAL;AACA,WAAKC,uBAAL;AACD;;;iCAEY;AACX,WAAKC,kBAAL;AACA,WAAKC,mBAAL;AACD;;;8CAEyB;AACxB,WAAKA,mBAAL;AACA,WAAKC,qBAAL;AACA,WAAKC,eAAL,GAAuBC,YAAY,KAAKF,qBAAL,CAA2BG,IAA3B,CAAgC,IAAhC,CAAZ,EAAmD,KAAKvC,OAAL,CAAawC,oBAAb,KAAsC,IAAzF,CAAvB;AACD;;;0CAEqB;AACpB,UAAI,KAAKH,eAAT,EAA0B;AACxBI,sBAAc,KAAKJ,eAAnB;AACA,aAAKA,eAAL,GAAuB,IAAvB;AACD;AACF;;;4CAEuB;AAAA;;AACtB,UAAIK,mBAAmBZ,OAAOC,IAAP,CAAY,KAAKzB,SAAjB,CAAvB;AACA,UAAIqC,wBAAwBb,OAAOC,IAAP,CAAY,KAAKvB,cAAjB,CAA5B;AACA,UAAIoC,gBAAgB,EAApB;;AAEA,UAAIF,iBAAiBG,MAAjB,KAA4B,CAA5B,IAAiCF,sBAAsBE,MAAtB,KAAiC,CAAtE,EAAyE;AACvE;AACD;;AAEDH,uBAAiBxB,OAAjB,CAAyB,UAACC,OAAD,EAAa;AACpC,YAAI2B,eAAe,OAAKxC,SAAL,CAAea,OAAf,EAAwBJ,KAA3C;AACA,YAAIe,OAAOC,IAAP,CAAYe,YAAZ,EAA0BD,MAA9B,EAAsCD,cAAczB,OAAd,IAAyB2B,YAAzB;AACvC,OAHD;;AAKAH,4BAAsBzB,OAAtB,CAA8B,UAACE,YAAD,EAAkB;AAC9C,YAAI2B,oBAAoB,OAAKvC,cAAL,CAAoBY,YAApB,EAAkCL,KAA1D;AACA,YAAIe,OAAOC,IAAP,CAAYgB,iBAAZ,EAA+BF,MAAnC,EAA2CD,cAAcxB,YAAd,IAA8B2B,iBAA9B;AAC5C,OAHD;;AAKA,UAAIC,cAAc,SAAdA,WAAc,CAACvB,MAAD,EAAgC;AAChD,YAAIA,OAAOwB,KAAP,IAAgB,OAAKjD,OAAL,CAAakD,wBAAjC,EAA2D;AACzD,iBAAKnD,gBAAL,CAAsB2B,cAAtB,CAAqCD,MAArC;AACD;;AAED,YAAI,CAACA,OAAOwB,KAAR,IAAiB,OAAKjD,OAAL,CAAamD,4BAAlC,EAAgE;AAC9D,iBAAKpD,gBAAL,CAAsB2B,cAAtB,CAAqCD,MAArC;AACD;AACF,OARD;;AAUA,WAAKvB,kBAAL,CAAwB;AACtBc,kBAAU0B,gBADY;AAEtBzB,uBAAe0B,qBAFO;AAGtB5B,eAAO6B,aAHe,EAAxB,EAG0BI,YAAYT,IAAZ,CAAiB,IAAjB,CAH1B;AAID;;;0CAEqB;AACpB,WAAKL,kBAAL;AACA,UAAIlB,WAAW,EAAf;AACA,UAAIC,gBAAgB,EAApB;;AAEAa,aAAOC,IAAP,CAAY,KAAKzB,SAAjB,EAA4BY,OAA5B,CAAoC,UAACC,OAAD;AAAA,eAAaH,SAASoC,IAAT,CAAcjC,OAAd,CAAb;AAAA,OAApC;AACAW,aAAOC,IAAP,CAAY,KAAKxB,iBAAjB,EAAoCW,OAApC,CAA4C,UAACC,OAAD;AAAA,eAAaH,SAASoC,IAAT,CAAcjC,UAAU,SAAxB,CAAb;AAAA,OAA5C;;AAEAW,aAAOC,IAAP,CAAY,KAAKvB,cAAjB,EAAiCU,OAAjC,CAAyC,UAACE,YAAD;AAAA,eAAkBH,cAAcmC,IAAd,CAAmBhC,YAAnB,CAAlB;AAAA,OAAzC;AACAU,aAAOC,IAAP,CAAY,KAAKtB,sBAAjB,EAAyCS,OAAzC,CAAiD,UAACE,YAAD;AAAA,eAAkBH,cAAcmC,IAAd,CAAmBhC,eAAe,SAAlC,CAAlB;AAAA,OAAjD;;AAEA,UAAIJ,SAAS6B,MAAT,KAAoB,CAApB,IAAyB5B,cAAc4B,MAAd,KAAyB,CAAtD,EAAyD;AACvD;AACD;;AAED,UAAMQ,gBAAgB;AACpBrC,0BADoB;AAEpBC,oCAFoB;AAGpBI,mBAAW,KAAKX,UAHI;AAIpB4C,0BAAkB,KAAKtD,OAAL,CAAasD,gBAJX;AAKpBC,gBAAQ,KAAKC;AALO,OAAtB;;AAQA,WAAKC,cAAL,GAAsB,KAAKrD,kBAAL,CAAwBiD,aAAxB,EAAuC,KAAKK,yBAAL,CAA+BnB,IAA/B,CAAoC,IAApC,CAAvC,CAAtB;AACD;;;8CAEyBd,M,EAA4BkC,O,EAA4B;AAAA;;AAChF,UAAIlC,OAAOwB,KAAX,EAAkB;AAEhB,YAAIxB,OAAOmC,QAAP,KAAoB,mBAAxB,EAA6C;AAC3C,eAAK5B,mBAAL;AACD;;AAGD,YAAIP,OAAOmC,QAAP,KAAoB,yBAAxB,EAAmD;AACjD,eAAKC,UAAL;AACA,eAAKjD,oBAAL,CAA0BkD,cAA1B,CAAyC,YAAM;AAC7C,mBAAKvC,SAAL;AACA,mBAAKZ,4BAAL,GAAoC,IAApC;AACA,gBAAIoD,sBAA0C;AAC5CH,wBAAU,uBADkC;AAE5CI,yBAAWvC,OAAOuC;AAF0B,aAA9C;AAIA,mBAAKjE,gBAAL,CAAsB2B,cAAtB,CAAqCqC,mBAArC;AACD,WARD;AASA,eAAKnD,oBAAL,CAA0BqD,YAA1B;AACA,eAAKlE,gBAAL,CAAsB2B,cAAtB,CAAqCD,MAArC;AACD;;AAED;AACD;;AAED,UAAI,CAAC,KAAKd,4BAAV,EAAwC;AACtC,YAAIuD,oBAAwC,EAA5C;AACAA,0BAAkBN,QAAlB,GAA6B,qBAA7B;AACAM,0BAAkBF,SAAlB,GAA8BvC,OAAOuC,SAArC;AACA,aAAKrD,4BAAL,GAAoC,IAApC;AACA,aAAKZ,gBAAL,CAAsB2B,cAAtB,CAAqCwC,iBAArC;AACD;;AAEDP,cAAQQ,QAAR,CAAiBjD,OAAjB,CAAyB,UAACkD,OAAD,EAAa;AACpC,YAAIjD,UAAUiD,QAAQjD,OAAtB;AACA,YAAIkD,oBAAoBD,QAAQC,iBAAhC;AACA,YAAIC,kBAAkBF,QAAQE,eAA9B;;AAEA,YAAInD,YAAYkD,iBAAhB,EAAmC;AACjCA,8BAAoB,IAApB;AACD;;AAED,YAAI,gBAAME,QAAN,CAAeH,QAAQjD,OAAvB,EAAgC,SAAhC,CAAJ,EAAgD;AAC9C,cAAIqD,WAAiC,EAArC;AACAA,mBAASC,aAAT,GAA0BJ,qBAAqB,IAAtB,GAA8BlD,OAA9B,GAAwC,IAAjE;AACAqD,mBAASE,iBAAT,GAA6BL,qBAAqB,IAArB,GAA4BA,iBAA5B,GAAgDlD,OAA7E;AACAqD,mBAASG,MAAT,GAAkBP,QAAQT,OAAR,CAAgBgB,MAAlC;AACAH,mBAASzD,KAAT,GAAiBqD,QAAQT,OAAR,CAAgBiB,IAAjC;AACAJ,mBAASnD,SAAT,GAAqBiD,gBAAgBO,gBAArC;AACAL,mBAASM,SAAT,GAAqBV,QAAQT,OAAR,CAAgBmB,SAArC;AACAN,mBAASO,IAAT,GAAgBX,QAAQT,OAAR,CAAgBoB,IAAhC;AACAP,mBAASQ,SAAT,GAAqBZ,QAAQT,OAAR,CAAgBqB,SAArC;AACA,iBAAKjF,gBAAL,CAAsBkF,gBAAtB,CAAuCT,QAAvC;AACD,SAXD,MAWO;AACL,cAAIA,YAAgC,EAApC;AACAA,oBAASC,aAAT,GAA0BJ,qBAAqB,IAAtB,GAA8BlD,OAA9B,GAAwC,IAAjE;AACAqD,oBAASE,iBAAT,GAA6BL,qBAAqB,IAArB,GAA4BA,iBAA5B,GAAgDlD,OAA7E;AACAqD,oBAASnD,SAAT,GAAqBiD,gBAAgBO,gBAArC;;AAEA,cAAI,OAAK7E,OAAL,CAAakF,SAAjB,EAA4B;AAC1BV,sBAASJ,OAAT,GAAmB,OAAK/D,OAAL,CAAa8E,OAAb,CAAqBf,QAAQT,OAA7B,CAAnB;AACD,WAFD,MAEO;AACLa,sBAASJ,OAAT,GAAmBA,QAAQT,OAA3B;AACD;;AAED,iBAAK5D,gBAAL,CAAsBqF,eAAtB,CAAsCZ,SAAtC;AACD;AACF,OAlCD;;AAoCA,WAAKhB,OAAL,GAAeG,QAAQ0B,QAAR,CAAiB9B,MAAhC;AACA,WAAK7C,UAAL,GAAkBiD,QAAQ0B,QAAR,CAAiBhE,SAAnC;AACA,WAAKW,mBAAL;AACD;;;yCAEoB;AACnB,UAAI,KAAKyB,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoB6B,KAApB;AACA,aAAK7B,cAAL,GAAsB,IAAtB;AACD;AACF","file":"core/components/subscription_manager.js","sourcesContent":["\nimport SubscribeEndpoints from '../endpoints/subscribe';\nimport TimeEndpoints from '../endpoints/time';\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusAnnouncement, PresenceAnnouncement } from '../flow_interfaces';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    subscribeEndpoints: SubscribeEndpoints,\n    timeEndpoints: TimeEndpoints,\n    config: Config,\n    crypto: Crypto,\n    listenerManager: ListenerManager\n}\n\nexport default class {\n\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n\n  _leaveEndpoint: Function;\n  _heartbeatEndpoint: Function;\n  _setStateEndpoint: Function;\n  _subscribeEndpoint: Function;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _timetoken: number;\n  _region: number;\n\n  _subscribeCall: Object;\n\n  _heartbeatTimer: number;\n  _subscriptionStatusAnnounced: boolean;\n\n  constructor({ subscribeEndpoint, leaveEndpoint, heartbeatEndpoint, setStateEndpoint, timeEndpoint, config, crypto, listenerManager }: SubscriptionManagerConsturct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n\n    this._leaveEndpoint = leaveEndpoint;\n    this._heartbeatEndpoint = heartbeatEndpoint;\n    this._setStateEndpoint = setStateEndpoint;\n    this._subscribeEndpoint = subscribeEndpoint;\n\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._timetoken = 0;\n    this._subscriptionStatusAnnounced = false;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    this._setStateEndpoint({ state, channels, channelGroups }, callback);\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false } = args;\n\n    if (timetoken) this._timetoken = timetoken;\n\n    channels.forEach((channel) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n    });\n\n    this._subscriptionStatusAnnounced = false;\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs) {\n    const { channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) delete this._channels[channel];\n      if (channel in this._presenceChannels) delete this._presenceChannels[channel];\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) delete this._channelGroups[channelGroup];\n      if (channelGroup in this._presenceChannelGroups) delete this._channelGroups[channelGroup];\n    });\n\n    if (this._config.suppressLeaveEvents === false) {\n      this._leaveEndpoint({ channels, channelGroups }, (status) => {\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    this.reconnect();\n  }\n\n  unsubscribeAll() {\n    this.adaptUnsubscribeChange({ channels: this.getSubscribedChannels(), channelGroups: this.getSubscribedChannelGroups() });\n  }\n\n  getSubscribedChannels() {\n    return Object.keys(this._channels);\n  }\n\n  getSubscribedChannelGroups() {\n    return Object.keys(this._channelGroups);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n    this._performHeartbeatLoop();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getHeartbeatInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    let presenceChannels = Object.keys(this._channels);\n    let presenceChannelGroups = Object.keys(this._channelGroups);\n    let presenceState = {};\n\n    if (presenceChannels.length === 0 && presenceChannelGroups.length === 0) {\n      return;\n    }\n\n    presenceChannels.forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (Object.keys(channelState).length) presenceState[channel] = channelState;\n    });\n\n    presenceChannelGroups.forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n      if (Object.keys(channelGroupState).length) presenceState[channelGroup] = channelGroupState;\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._heartbeatEndpoint({\n      channels: presenceChannels,\n      channelGroups: presenceChannelGroups,\n      state: presenceState }, onHeartbeat.bind(this));\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach((channel) => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach((channel) => channels.push(channel + '-pnpres'));\n\n    Object.keys(this._channelGroups).forEach((channelGroup) => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach((channelGroup) => channelGroups.push(channelGroup + '-pnpres'));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      timetoken: this._timetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    };\n\n    this._subscribeCall = this._subscribeEndpoint(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === 'PNTimeoutCategory') {\n        this._startSubscribeLoop();\n      }\n\n      // we lost internet connection, alert the reconnection manager and terminate all loops\n      if (status.category === 'PNNetworkIssuesCategory') {\n        this.disconnect();\n        this._reconnectionManager.onReconnection(() => {\n          this.reconnect();\n          this._subscriptionStatusAnnounced = true;\n          let reconnectedAnnounce: StatusAnnouncement = {\n            category: 'PNReconnectedCategory',\n            operation: status.operation\n          };\n          this._listenerManager.announceStatus(reconnectedAnnounce);\n        });\n        this._reconnectionManager.startPolling();\n        this._listenerManager.announceStatus(status);\n      }\n\n      return;\n    }\n\n    if (!this._subscriptionStatusAnnounced) {\n      let connectedAnnounce: StatusAnnouncement = {};\n      connectedAnnounce.category = 'PNConnectedCategory';\n      connectedAnnounce.operation = status.operation;\n      this._subscriptionStatusAnnounced = true;\n      this._listenerManager.announceStatus(connectedAnnounce);\n    }\n\n    payload.messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        announce.action = message.payload.action;\n        announce.state = message.payload.data;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n        this._listenerManager.announcePresence(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        announce.timetoken = publishMetaData.publishTimetoken;\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._timetoken = payload.metadata.timetoken;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      this._subscribeCall.abort();\n      this._subscribeCall = null;\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}