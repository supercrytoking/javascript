{"version":3,"sources":["core/endpoints/history/message_counts.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","PNMessageCounts","modules","incomingParams","channels","timetoken","channelTimetokens","config","subscribeKey","stringifiedChannels","join","encodeString","getTransactionTimeout","outgoingParams","serverResponse"],"mappings":";;;;;QAWgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QASAC,M,GAAAA,M;QASAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAUAC,c,GAAAA,c;;AAjDhB;;;;AACA;;;;;;AAQO,SAASN,YAAT,GAAgC;AACrC,SAAO,qBAAmBO,eAA1B;AACD;;AAEM,SAASN,cAAT,CAAwBO,OAAxB,EAAgDC,cAAhD,EAAyF;AAAA,MACxFC,QADwF,GAC7CD,cAD6C,CACxFC,QADwF;AAAA,MAC9EC,SAD8E,GAC7CF,cAD6C,CAC9EE,SAD8E;AAAA,MACnEC,iBADmE,GAC7CH,cAD6C,CACnEG,iBADmE;AAAA,MAExFC,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;;;AAI9F,MAAI,CAACH,QAAL,EAAe,OAAO,iBAAP;AACf,MAAIC,aAAaC,iBAAjB,EAAoC,OAAO,2DAAP;AACpC,MAAI,CAACC,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASZ,MAAT,CAAgBM,OAAhB,EAAwCC,cAAxC,EAAyF;AAAA,MACxFC,QADwF,GAC3ED,cAD2E,CACxFC,QADwF;AAAA,MAExFG,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;;;AAI9F,MAAIE,sBAAsBL,SAASM,IAAT,CAAc,GAAd,CAA1B;;AAEA,kCAA8BH,OAAOC,YAArC,wBAAoE,gBAAMG,YAAN,CAAmBF,mBAAnB,CAApE;AACD;;AAEM,SAASZ,iBAAT,OAA+D;AAAA,MAAlCU,MAAkC,QAAlCA,MAAkC;;AACpE,SAAOA,OAAOK,qBAAP,EAAP;AACD;;AAEM,SAASd,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBG,OAAvB,EAA+CC,cAA/C,EAAgG;AAAA,MAC7FE,SAD6F,GAC5DF,cAD4D,CAC7FE,SAD6F;AAAA,MAClFC,iBADkF,GAC5DH,cAD4D,CAClFG,iBADkF;;AAErG,MAAIO,iBAAyB,EAA7B;;AAEA,MAAIR,SAAJ,EAAeQ,eAAeR,SAAf,GAA2BA,SAA3B;AACf,MAAIC,iBAAJ,EAAuBO,eAAeP,iBAAf,GAAmC,gBAAMK,YAAN,CAAmBL,kBAAkBI,IAAlB,CAAuB,GAAvB,CAAnB,CAAnC;;AAEvB,SAAOG,cAAP;AACD;;AAEM,SAASb,cAAT,CAAwBE,OAAxB,EAAgDY,cAAhD,EACqB;;AAE1B,SAAO,EAAEV,UAAUU,eAAeV,QAA3B,EAAP;AACD","file":"message_counts.js","sourcesContent":["/* @flow */\n\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\nimport type {\n  MessageCounterArguments,\n  MessageCountersResponse,\n  ModulesInject\n} from '../../flow_interfaces';\n\n\nexport function getOperation(): string {\n  return operationConstants.PNMessageCounts;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: MessageCounterArguments) {\n  let { channels, timetoken, channelTimetokens } = incomingParams;\n  let { config } = modules;\n\n  if (!channels) return 'Missing channel';\n  if (timetoken && channelTimetokens) return 'timetoken and channelTimetokens are incompatible together';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: MessageCounterArguments): string {\n  let { channels } = incomingParams;\n  let { config } = modules;\n\n  let stringifiedChannels = channels.join(',');\n\n  return `/v3/history/sub-key/${config.subscribeKey}/message-counts/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: MessageCounterArguments): Object {\n  const { timetoken, channelTimetokens } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if (timetoken) outgoingParams.timetoken = timetoken;\n  if (channelTimetokens) outgoingParams.channelTimetokens = utils.encodeString(channelTimetokens.join(','));\n\n  return outgoingParams;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: MessageCounterArguments)\n  : MessageCountersResponse {\n\n  return { channels: serverResponse.channels };\n}\n"]}