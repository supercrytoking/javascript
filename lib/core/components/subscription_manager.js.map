{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_crypto","_channels","_presenceChannels","_channelGroups","_presenceChannelGroups","_pendingChannelSubscriptions","_pendingChannelGroupSubscriptions","_currentTimetoken","_lastTimetoken","_subscriptionStatusAnnounced","_reconnectionManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","timetoken","withPresence","subscribeKey","console","log","push","reconnect","isOffline","suppressLeaveEvents","status","affectedChannels","affectedChannelGroups","currentTimetoken","lastTimetoken","announceStatus","Object","keys","length","_region","stopPolling","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","getHeartbeatInterval","clearInterval","presenceChannels","presenceChannelGroups","presenceState","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","announceSuccessfulHeartbeats","subscribeArgs","filterExpression","region","_subscribeCall","_processSubscribeResponse","payload","category","PNTimeoutCategory","PNNetworkIssuesCategory","disconnect","onReconnection","reconnectedAnnounce","PNReconnectedCategory","operation","startPolling","metadata","connectedAnnounce","PNConnectedCategory","messages","requestMessageCountThreshold","countAnnouncement","PNRequestMessageCountExceededCategory","message","subscriptionMatch","publishMetaData","endsWith","announce","subscription","actualChannel","subscribedChannel","substring","lastIndexOf","action","data","publishTimetoken","occupancy","uuid","timestamp","join","leave","timeout","announcePresence","publisher","issuingClientId","cipherKey","decrypt","announceMessage","abort"],"mappings":"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","file":"subscription_manager.js","sourcesContent":["/* @flow */\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusAnnouncement, PresenceAnnouncement } from '../flow_interfaces';\nimport categoryConstants from '../constants/categories';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    leaveEndpoint: Function,\n    subscribeEndpoint: Function,\n    timeEndpoint: Function,\n    heartbeatEndpoint: Function,\n    setStateEndpoint: Function,\n    config: Config,\n    crypto: Crypto,\n    listenerManager: ListenerManager\n}\n\nexport default class {\n\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n\n  _leaveEndpoint: Function;\n  _heartbeatEndpoint: Function;\n  _setStateEndpoint: Function;\n  _subscribeEndpoint: Function;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _currentTimetoken: number;\n  _lastTimetoken: number;\n  _region: ?number;\n\n  _subscribeCall: ?Object;\n  _heartbeatTimer: ?number;\n\n  _subscriptionStatusAnnounced: boolean;\n\n  // store pending connection elements\n  _pendingChannelSubscriptions: Array<string>;\n  _pendingChannelGroupSubscriptions: Array<string>;\n  //\n\n  constructor({ subscribeEndpoint, leaveEndpoint, heartbeatEndpoint, setStateEndpoint, timeEndpoint, config, crypto, listenerManager }: SubscriptionManagerConsturct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n\n    this._leaveEndpoint = leaveEndpoint;\n    this._heartbeatEndpoint = heartbeatEndpoint;\n    this._setStateEndpoint = setStateEndpoint;\n    this._subscribeEndpoint = subscribeEndpoint;\n\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._pendingChannelSubscriptions = [];\n    this._pendingChannelGroupSubscriptions = [];\n\n    this._currentTimetoken = 0;\n    this._lastTimetoken = 0;\n\n    this._subscriptionStatusAnnounced = false;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    return this._setStateEndpoint({ state, channels, channelGroups }, callback);\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false } = args;\n\n    if (!this._config.subscribeKey || this._config.subscribeKey === '') {\n      if (console && console.log) console.log('subscribe key missing; aborting subscribe') //eslint-disable-line\n      return;\n    }\n\n    if (timetoken) {\n      this._lastTimetoken = this._currentTimetoken;\n      this._currentTimetoken = timetoken;\n    }\n\n    channels.forEach((channel: string) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n\n      this._pendingChannelSubscriptions.push(channel);\n    });\n\n    channelGroups.forEach((channelGroup: string) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n\n      this._pendingChannelGroupSubscriptions.push(channelGroup);\n    });\n\n    this._subscriptionStatusAnnounced = false;\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs, isOffline: boolean) {\n    const { channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) delete this._channels[channel];\n      if (channel in this._presenceChannels) delete this._presenceChannels[channel];\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) delete this._channelGroups[channelGroup];\n      if (channelGroup in this._presenceChannelGroups) delete this._channelGroups[channelGroup];\n    });\n\n    if (this._config.suppressLeaveEvents === false && !isOffline) {\n      this._leaveEndpoint({ channels, channelGroups }, (status) => {\n        status.affectedChannels = channels;\n        status.affectedChannelGroups = channelGroups;\n        status.currentTimetoken = this._currentTimetoken;\n        status.lastTimetoken = this._lastTimetoken;\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    // if we have nothing to subscribe to, reset the timetoken.\n    if (Object.keys(this._channels).length === 0 &&\n      Object.keys(this._presenceChannels).length === 0 &&\n      Object.keys(this._channelGroups).length === 0 &&\n      Object.keys(this._presenceChannelGroups).length === 0) {\n      this._lastTimetoken = 0;\n      this._currentTimetoken = 0;\n      this._region = null;\n      this._reconnectionManager.stopPolling();\n    }\n\n    this.reconnect();\n  }\n\n  unsubscribeAll(isOffline: boolean) {\n    this.adaptUnsubscribeChange({ channels: this.getSubscribedChannels(), channelGroups: this.getSubscribedChannelGroups() }, isOffline);\n  }\n\n  getSubscribedChannels(): Array<string> {\n    return Object.keys(this._channels);\n  }\n\n  getSubscribedChannelGroups(): Array<string> {\n    return Object.keys(this._channelGroups);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n    this._reconnectionManager.stopPolling();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n    this._performHeartbeatLoop();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getHeartbeatInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    let presenceChannels = Object.keys(this._channels);\n    let presenceChannelGroups = Object.keys(this._channelGroups);\n    let presenceState = {};\n\n    if (presenceChannels.length === 0 && presenceChannelGroups.length === 0) {\n      return;\n    }\n\n    presenceChannels.forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (Object.keys(channelState).length) presenceState[channel] = channelState;\n    });\n\n    presenceChannelGroups.forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n      if (Object.keys(channelGroupState).length) presenceState[channelGroup] = channelGroupState;\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._heartbeatEndpoint({\n      channels: presenceChannels,\n      channelGroups: presenceChannelGroups,\n      state: presenceState }, onHeartbeat.bind(this));\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach(channel => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach(channel => channels.push(`${channel}-pnpres`));\n\n    Object.keys(this._channelGroups).forEach(channelGroup => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach(channelGroup => channelGroups.push(`${channelGroup}-pnpres`));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      timetoken: this._currentTimetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    };\n\n    this._subscribeCall = this._subscribeEndpoint(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === categoryConstants.PNTimeoutCategory) {\n        this._startSubscribeLoop();\n      } else if (status.category === categoryConstants.PNNetworkIssuesCategory) {\n        // we lost internet connection, alert the reconnection manager and terminate all loops\n        this.disconnect();\n        this._reconnectionManager.onReconnection(() => {\n          this.reconnect();\n          this._subscriptionStatusAnnounced = true;\n          let reconnectedAnnounce: StatusAnnouncement = {\n            category: categoryConstants.PNReconnectedCategory,\n            operation: status.operation,\n            lastTimetoken: this._lastTimetoken,\n            currentTimetoken: this._currentTimetoken\n          };\n          this._listenerManager.announceStatus(reconnectedAnnounce);\n        });\n        this._reconnectionManager.startPolling();\n        this._listenerManager.announceStatus(status);\n      } else {\n        this._listenerManager.announceStatus(status);\n      }\n\n      return;\n    }\n\n    this._lastTimetoken = this._currentTimetoken;\n    this._currentTimetoken = payload.metadata.timetoken;\n\n\n    if (!this._subscriptionStatusAnnounced) {\n      let connectedAnnounce: StatusAnnouncement = {};\n      connectedAnnounce.category = categoryConstants.PNConnectedCategory;\n      connectedAnnounce.operation = status.operation;\n      connectedAnnounce.affectedChannels = this._pendingChannelSubscriptions;\n      connectedAnnounce.affectedChannelGroups = this._pendingChannelGroupSubscriptions;\n      connectedAnnounce.lastTimetoken = this._lastTimetoken;\n      connectedAnnounce.currentTimetoken = this._currentTimetoken;\n      this._subscriptionStatusAnnounced = true;\n      this._listenerManager.announceStatus(connectedAnnounce);\n\n      // clear the pending connections list\n      this._pendingChannelSubscriptions = [];\n      this._pendingChannelGroupSubscriptions = [];\n    }\n\n    let messages = payload.messages || [];\n    let { requestMessageCountThreshold } = this._config;\n\n    if (requestMessageCountThreshold && messages.length >= requestMessageCountThreshold) {\n      let countAnnouncement: StatusAnnouncement = {};\n      countAnnouncement.category = categoryConstants.PNRequestMessageCountExceededCategory;\n      countAnnouncement.operation = status.operation;\n      this._listenerManager.announceStatus(countAnnouncement);\n    }\n\n    messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        if (channel) {\n          announce.channel = channel.substring(0, channel.lastIndexOf('-pnpres'));\n        }\n\n        if (subscriptionMatch) {\n          announce.subscription = subscriptionMatch.substring(0, subscriptionMatch.lastIndexOf('-pnpres'));\n        }\n\n        announce.action = message.payload.action;\n        announce.state = message.payload.data;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n\n        if (message.payload.join) {\n          announce.join = message.payload.join;\n        }\n\n        if (message.payload.leave) {\n          announce.leave = message.payload.leave;\n        }\n\n        if (message.payload.timeout) {\n          announce.timeout = message.payload.timeout;\n        }\n\n        this._listenerManager.announcePresence(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.publisher = message.issuingClientId;\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      this._subscribeCall.abort();\n      this._subscribeCall = null;\n    }\n  }\n\n}\n"]}