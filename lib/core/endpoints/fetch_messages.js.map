{"version":3,"sources":["core/endpoints/fetch_messages.js"],"names":["__processMessage","modules","message","config","crypto","cipherKey","decrypt","e","getOperation","operationConstants","PNFetchMessagesOperation","validateParams","incomingParams","channels","length","subscribeKey","getURL","stringifiedChannels","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","start","end","count","stringifiedTimeToken","outgoingParams","max","string_message_token","handleResponse","serverResponse","response","Object","keys","forEach","channelName","messageEnvelope","announce","channel","subscription","timetoken","push"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport {\n  FetchMessagesArguments,\n  FetchMessagesResponse,\n  MessageAnnouncement,\n  HistoryV3Response,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction __processMessage(modules, message: Object): Object | null {\n  let { config, crypto } = modules;\n  if (!config.cipherKey) return message;\n\n  try {\n    return crypto.decrypt(message);\n  } catch (e) {\n    return message;\n  }\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNFetchMessagesOperation;\n}\n\nexport function validateParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n) {\n  let { channels } = incomingParams;\n  let { config } = modules;\n\n  if (!channels || channels.length === 0) return 'Missing channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): string {\n  let { channels = [] } = incomingParams;\n  let { config } = modules;\n\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v3/history/sub-key/${\n    config.subscribeKey\n  }/channel/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): Object {\n  const { start, end, count, stringifiedTimeToken = false } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if (count) outgoingParams.max = count;\n  if (start) outgoingParams.start = start;\n  if (end) outgoingParams.end = end;\n  if (stringifiedTimeToken) outgoingParams.string_message_token = 'true';\n\n  return outgoingParams;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: HistoryV3Response\n): FetchMessagesResponse {\n  const response: FetchMessagesResponse = {\n    channels: {},\n  };\n\n  Object.keys(serverResponse.channels || {}).forEach((channelName) => {\n    response.channels[channelName] = [];\n\n    (serverResponse.channels[channelName] || []).forEach((messageEnvelope) => {\n      let announce: MessageAnnouncement = {};\n      announce.channel = channelName;\n      announce.subscription = null;\n      announce.timetoken = messageEnvelope.timetoken;\n      announce.message = __processMessage(modules, messageEnvelope.message);\n      response.channels[channelName].push(announce);\n    });\n  });\n\n  return response;\n}\n"],"file":"fetch_messages.js"}