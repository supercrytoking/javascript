{"version":3,"sources":["core/components/subscription_manager.js"],"names":["subscribeEndpoint","leaveEndpoint","heartbeatEndpoint","setStateEndpoint","timeEndpoint","config","crypto","listenerManager","_listenerManager","_config","_leaveEndpoint","_heartbeatEndpoint","_setStateEndpoint","_subscribeEndpoint","_crypto","_channels","_presenceChannels","_channelGroups","_presenceChannelGroups","_pendingChannelSubscriptions","_pendingChannelGroupSubscriptions","_timetoken","_subscriptionStatusAnnounced","_reconnectionManager","args","callback","state","channels","channelGroups","forEach","channel","channelGroup","timetoken","withPresence","push","reconnect","suppressLeaveEvents","status","affectedChannels","affectedChannelGroups","announceStatus","adaptUnsubscribeChange","getSubscribedChannels","getSubscribedChannelGroups","Object","keys","_startSubscribeLoop","_registerHeartbeatTimer","_stopSubscribeLoop","_stopHeartbeatTimer","_performHeartbeatLoop","_heartbeatTimer","setInterval","bind","getHeartbeatInterval","clearInterval","presenceChannels","presenceChannelGroups","presenceState","length","channelState","channelGroupState","onHeartbeat","error","announceFailedHeartbeats","announceSuccessfulHeartbeats","subscribeArgs","filterExpression","region","_region","_subscribeCall","_processSubscribeResponse","payload","category","PNTimeoutCategory","PNNetworkIssuesCategory","disconnect","onReconnection","reconnectedAnnounce","PNReconnectedCategory","operation","startPolling","connectedAnnounce","PNConnectedCategory","messages","message","subscriptionMatch","publishMetaData","endsWith","announce","subscription","actualChannel","subscribedChannel","substring","lastIndexOf","action","data","publishTimetoken","occupancy","uuid","timestamp","announcePresence","cipherKey","decrypt","announceMessage","metadata","abort"],"mappings":"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","file":"core/components/subscription_manager.js","sourcesContent":["/* @flow */\nimport Crypto from '../components/cryptography';\nimport Config from '../components/config';\nimport ListenerManager from '../components/listener_manager';\nimport ReconnectionManager from '../components/reconnection_manager';\nimport utils from '../utils';\nimport { MessageAnnouncement, SubscribeEnvelope, StatusAnnouncement, PresenceAnnouncement } from '../flow_interfaces';\nimport categoryConstants from '../constants/categories';\n\ntype SubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  withPresence: ?boolean,\n  timetoken: ?number\n}\n\ntype UnsubscribeArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>\n}\n\ntype StateArgs = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  state: Object\n}\n\ntype SubscriptionManagerConsturct = {\n    leaveEndpoint: Function,\n    subscribeEndpoint: Function,\n    timeEndpoint: Function,\n    heartbeatEndpoint: Function,\n    setStateEndpoint: Function,\n    config: Config,\n    crypto: Crypto,\n    listenerManager: ListenerManager\n}\n\nexport default class {\n\n  _crypto: Crypto;\n  _config: Config;\n  _listenerManager: ListenerManager;\n  _reconnectionManager: ReconnectionManager;\n\n  _leaveEndpoint: Function;\n  _heartbeatEndpoint: Function;\n  _setStateEndpoint: Function;\n  _subscribeEndpoint: Function;\n\n  _channels: Object;\n  _presenceChannels: Object;\n\n  _channelGroups: Object;\n  _presenceChannelGroups: Object;\n\n  _timetoken: number;\n  _region: number;\n\n  _subscribeCall: ?Object;\n  _heartbeatTimer: ?number;\n\n  _subscriptionStatusAnnounced: boolean;\n\n  // store pending connection elements\n  _pendingChannelSubscriptions: Array<string>;\n  _pendingChannelGroupSubscriptions: Array<string>;\n  //\n\n  constructor({ subscribeEndpoint, leaveEndpoint, heartbeatEndpoint, setStateEndpoint, timeEndpoint, config, crypto, listenerManager }: SubscriptionManagerConsturct) {\n    this._listenerManager = listenerManager;\n    this._config = config;\n\n    this._leaveEndpoint = leaveEndpoint;\n    this._heartbeatEndpoint = heartbeatEndpoint;\n    this._setStateEndpoint = setStateEndpoint;\n    this._subscribeEndpoint = subscribeEndpoint;\n\n    this._crypto = crypto;\n\n    this._channels = {};\n    this._presenceChannels = {};\n\n    this._channelGroups = {};\n    this._presenceChannelGroups = {};\n\n    this._pendingChannelSubscriptions = [];\n    this._pendingChannelGroupSubscriptions = [];\n\n    this._timetoken = 0;\n    this._subscriptionStatusAnnounced = false;\n\n    this._reconnectionManager = new ReconnectionManager({ timeEndpoint });\n  }\n\n  adaptStateChange(args: StateArgs, callback: Function) {\n    const { state, channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) this._channels[channel].state = state;\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) this._channelGroups[channelGroup].state = state;\n    });\n\n    this._setStateEndpoint({ state, channels, channelGroups }, callback);\n  }\n\n  adaptSubscribeChange(args: SubscribeArgs) {\n    const { timetoken, channels = [], channelGroups = [], withPresence = false } = args;\n\n    if (timetoken) this._timetoken = timetoken;\n\n    channels.forEach((channel: string) => {\n      this._channels[channel] = { state: {} };\n      if (withPresence) this._presenceChannels[channel] = {};\n\n      this._pendingChannelSubscriptions.push(channel);\n    });\n\n    channelGroups.forEach((channelGroup: string) => {\n      this._channelGroups[channelGroup] = { state: {} };\n      if (withPresence) this._presenceChannelGroups[channelGroup] = {};\n\n      this._pendingChannelGroupSubscriptions.push(channelGroup);\n    });\n\n    this._subscriptionStatusAnnounced = false;\n    this.reconnect();\n  }\n\n  adaptUnsubscribeChange(args: UnsubscribeArgs) {\n    const { channels = [], channelGroups = [] } = args;\n\n    channels.forEach((channel) => {\n      if (channel in this._channels) delete this._channels[channel];\n      if (channel in this._presenceChannels) delete this._presenceChannels[channel];\n    });\n\n    channelGroups.forEach((channelGroup) => {\n      if (channelGroup in this._channelGroups) delete this._channelGroups[channelGroup];\n      if (channelGroup in this._presenceChannelGroups) delete this._channelGroups[channelGroup];\n    });\n\n    if (this._config.suppressLeaveEvents === false) {\n      this._leaveEndpoint({ channels, channelGroups }, (status) => {\n        status.affectedChannels = channels;\n        status.affectedChannelGroups = channelGroups;\n        this._listenerManager.announceStatus(status);\n      });\n    }\n\n    this.reconnect();\n  }\n\n  unsubscribeAll() {\n    this.adaptUnsubscribeChange({ channels: this.getSubscribedChannels(), channelGroups: this.getSubscribedChannelGroups() });\n  }\n\n  getSubscribedChannels(): Array<string> {\n    return Object.keys(this._channels);\n  }\n\n  getSubscribedChannelGroups(): Array<string> {\n    return Object.keys(this._channelGroups);\n  }\n\n  reconnect() {\n    this._startSubscribeLoop();\n    this._registerHeartbeatTimer();\n  }\n\n  disconnect() {\n    this._stopSubscribeLoop();\n    this._stopHeartbeatTimer();\n  }\n\n  _registerHeartbeatTimer() {\n    this._stopHeartbeatTimer();\n    this._performHeartbeatLoop();\n    this._heartbeatTimer = setInterval(this._performHeartbeatLoop.bind(this), this._config.getHeartbeatInterval() * 1000);\n  }\n\n  _stopHeartbeatTimer() {\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n      this._heartbeatTimer = null;\n    }\n  }\n\n  _performHeartbeatLoop() {\n    let presenceChannels = Object.keys(this._channels);\n    let presenceChannelGroups = Object.keys(this._channelGroups);\n    let presenceState = {};\n\n    if (presenceChannels.length === 0 && presenceChannelGroups.length === 0) {\n      return;\n    }\n\n    presenceChannels.forEach((channel) => {\n      let channelState = this._channels[channel].state;\n      if (Object.keys(channelState).length) presenceState[channel] = channelState;\n    });\n\n    presenceChannelGroups.forEach((channelGroup) => {\n      let channelGroupState = this._channelGroups[channelGroup].state;\n      if (Object.keys(channelGroupState).length) presenceState[channelGroup] = channelGroupState;\n    });\n\n    let onHeartbeat = (status: StatusAnnouncement) => {\n      if (status.error && this._config.announceFailedHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n\n      if (!status.error && this._config.announceSuccessfulHeartbeats) {\n        this._listenerManager.announceStatus(status);\n      }\n    };\n\n    this._heartbeatEndpoint({\n      channels: presenceChannels,\n      channelGroups: presenceChannelGroups,\n      state: presenceState }, onHeartbeat.bind(this));\n  }\n\n  _startSubscribeLoop() {\n    this._stopSubscribeLoop();\n    let channels = [];\n    let channelGroups = [];\n\n    Object.keys(this._channels).forEach(channel => channels.push(channel));\n    Object.keys(this._presenceChannels).forEach(channel => channels.push(channel + '-pnpres'));\n\n    Object.keys(this._channelGroups).forEach(channelGroup => channelGroups.push(channelGroup));\n    Object.keys(this._presenceChannelGroups).forEach(channelGroup => channelGroups.push(channelGroup + '-pnpres'));\n\n    if (channels.length === 0 && channelGroups.length === 0) {\n      return;\n    }\n\n    const subscribeArgs = {\n      channels,\n      channelGroups,\n      timetoken: this._timetoken,\n      filterExpression: this._config.filterExpression,\n      region: this._region\n    };\n\n    this._subscribeCall = this._subscribeEndpoint(subscribeArgs, this._processSubscribeResponse.bind(this));\n  }\n\n  _processSubscribeResponse(status: StatusAnnouncement, payload: SubscribeEnvelope) {\n    if (status.error) {\n      // if we timeout from server, restart the loop.\n      if (status.category === categoryConstants.PNTimeoutCategory) {\n        this._startSubscribeLoop();\n      }\n\n      // we lost internet connection, alert the reconnection manager and terminate all loops\n      if (status.category === categoryConstants.PNNetworkIssuesCategory) {\n        this.disconnect();\n        this._reconnectionManager.onReconnection(() => {\n          this.reconnect();\n          this._subscriptionStatusAnnounced = true;\n          let reconnectedAnnounce: StatusAnnouncement = {\n            category: categoryConstants.PNReconnectedCategory,\n            operation: status.operation\n          };\n          this._listenerManager.announceStatus(reconnectedAnnounce);\n        });\n        this._reconnectionManager.startPolling();\n        this._listenerManager.announceStatus(status);\n      }\n\n      return;\n    }\n\n    if (!this._subscriptionStatusAnnounced) {\n      let connectedAnnounce: StatusAnnouncement = {};\n      connectedAnnounce.category = categoryConstants.PNConnectedCategory;\n      connectedAnnounce.operation = status.operation;\n      connectedAnnounce.affectedChannels = this._pendingChannelSubscriptions;\n      connectedAnnounce.affectedChannelGroups = this._pendingChannelGroupSubscriptions;\n      this._subscriptionStatusAnnounced = true;\n      this._listenerManager.announceStatus(connectedAnnounce);\n\n      // clear the pending connections list\n      this._pendingChannelSubscriptions = [];\n      this._pendingChannelGroupSubscriptions = [];\n    }\n\n    payload.messages.forEach((message) => {\n      let channel = message.channel;\n      let subscriptionMatch = message.subscriptionMatch;\n      let publishMetaData = message.publishMetaData;\n\n      if (channel === subscriptionMatch) {\n        subscriptionMatch = null;\n      }\n\n      if (utils.endsWith(message.channel, '-pnpres')) {\n        let announce: PresenceAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        if (channel) {\n          announce.channel = channel.substring(0, channel.lastIndexOf('-pnpres'));\n        }\n\n        if (subscriptionMatch) {\n          announce.subscription = subscriptionMatch.substring(0, subscriptionMatch.lastIndexOf('-pnpres'));\n        }\n\n        announce.action = message.payload.action;\n        announce.state = message.payload.data;\n        announce.timetoken = publishMetaData.publishTimetoken;\n        announce.occupancy = message.payload.occupancy;\n        announce.uuid = message.payload.uuid;\n        announce.timestamp = message.payload.timestamp;\n        this._listenerManager.announcePresence(announce);\n      } else {\n        let announce: MessageAnnouncement = {};\n        announce.channel = null;\n        announce.subscription = null;\n\n        // deprecated -->\n        announce.actualChannel = (subscriptionMatch != null) ? channel : null;\n        announce.subscribedChannel = subscriptionMatch != null ? subscriptionMatch : channel;\n        // <-- deprecated\n\n        announce.channel = channel;\n        announce.subscription = subscriptionMatch;\n        announce.timetoken = publishMetaData.publishTimetoken;\n\n        if (this._config.cipherKey) {\n          announce.message = this._crypto.decrypt(message.payload);\n        } else {\n          announce.message = message.payload;\n        }\n\n        this._listenerManager.announceMessage(announce);\n      }\n    });\n\n    this._region = payload.metadata.region;\n    this._timetoken = payload.metadata.timetoken;\n    this._startSubscribeLoop();\n  }\n\n  _stopSubscribeLoop() {\n    if (this._subscribeCall) {\n      this._subscribeCall.abort();\n      this._subscribeCall = null;\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}