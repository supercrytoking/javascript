{"version":3,"sources":["core/endpoints/access.js"],"names":[],"mappings":"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","file":"core/endpoints/access.js","sourcesContent":["/* @flow */\n\nimport Networking from '../components/networking';\nimport Config from '../components/config';\nimport Crypto from '../components/cryptography';\nimport Logger from '../components/logger';\nimport Responders from '../presenters/responders';\nimport BaseEndoint from './base.js';\nimport utils from '../utils.js';\n\nimport { endpointDefinition, statusStruct } from '../flow_interfaces';\n\ntype accessConstruct = {\n  networking: Networking,\n  config: Config,\n  crypto: Crypto\n};\n\ntype auditArguments = {\n  channel: string,\n  channelGroup: string,\n  authKeys: Array<string>,\n}\n\ntype auditResponse = {\n  channels: Object,\n  channelGroups: Object\n}\n\ntype grantArguments = {\n  channels: Array<string>,\n  channelGroups: Array<string>,\n  ttl: number,\n  read: boolean,\n  write: boolean,\n  manage: boolean,\n  authKeys: Array<string>\n}\n\ntype grantResponse = {\n  ttl: number,\n  level: string,\n  subscribeKey: string,\n  channels: Object,\n  channelGroups: Object\n}\n\n\nexport default class extends BaseEndoint {\n  networking: Networking;\n  config: Config;\n  _r: Responders;\n  _l: Logger;\n\n  constructor({ networking, config, crypto }: accessConstruct) {\n    super({ config });\n    this.networking = networking;\n    this.config = config;\n    this.crypto = crypto;\n    this._r = new Responders('#endpoints/PAM');\n    this._l = Logger.getLogger('#endpoints/PAM');\n  }\n\n  grant(args: grantArguments, callback: Function) {\n    const { channels = [], channelGroups = [], ttl, read = false, write = false, manage = false, authKeys = [] } = args;\n    const endpointConfig: endpointDefinition = {\n      params: {\n        subscribeKey: { required: true },\n        publishKey: { required: true },\n        uuid: { required: true }\n      },\n      url: '/v1/auth/grant/sub-key/' + this.config.subscribeKey\n    };\n\n    if (!callback) return this._l.error('Missing Callback');\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    params.r = (read) ? '1' : '0';\n    params.w = (write) ? '1' : '0';\n    params.m = (manage) ? '1' : '0';\n    params.timestamp = Math.floor(new Date().getTime() / 1000);\n\n    if (channels.length > 0) {\n      params.channel = channels.join(',');\n    }\n\n    if (channelGroups.length > 0) {\n      params['channel-group'] = channelGroups.join(',');\n    }\n\n    if (authKeys.length > 0) {\n      params.auth = authKeys.join(',');\n    }\n\n    if (ttl || ttl === 0) {\n      params.ttl = ttl;\n    }\n\n    let signInput = this.config.subscribeKey + '\\n' + this.config.publishKey + '\\ngrant\\n';\n    signInput += utils._get_pam_sign_input_from_params(params);\n\n    params.signature = this.crypto.HMACSHA256(signInput);\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      let channelsResponse = {};\n      let channelGroupsResponse = {};\n\n      // grant to singular channel\n      if (channels.length === 1 && channelGroups.length === 0) {\n        channelsResponse[payload.payload.channel] = payload.payload.auths;\n      }\n\n      // grant to singular channel groups\n      if (channelGroups.length === 1 && channels.length === 0) {\n        channelGroupsResponse[payload.payload['channel-groups']] = payload.payload.auths;\n      }\n\n      if (channels.length > 1) {\n        Object.keys(payload.payload.channels).forEach((channelName) => {\n          channelsResponse[channelName] = payload.payload.channels[channelName].auths;\n        });\n      }\n\n      if (channelGroups.length > 1) {\n        Object.keys(payload.payload['channel-groups']).forEach((channelGroupName) => {\n          channelGroupsResponse[channelGroupName] = payload.payload['channel-groups'][channelGroupName].auths;\n        });\n      }\n\n      const response: grantResponse = {\n        ttl: payload.payload.ttl,\n        level: payload.payload.level,\n        subscribeKey: payload.payload.subscribe_key,\n        channels: channelsResponse,\n        channelGroups: channelGroupsResponse\n      };\n\n      callback(status, response);\n    });\n  }\n\n  audit(args: auditArguments, callback: Function) {\n    const { channel, channelGroup, authKeys = [] } = args;\n    const endpointConfig: endpointDefinition = {\n      params: {\n        subscribeKey: { required: true },\n        publishKey: { required: true },\n        uuid: { required: true }\n      },\n      url: '/v1/auth/audit/sub-key/' + this.config.subscribeKey\n    };\n\n    // Make sure we have a Channel\n    if (!callback) return this._l.error('Missing Callback');\n\n    // validate this request and return false if stuff is missing\n    if (!this.validateEndpointConfig(endpointConfig)) { return; }\n    // create base params\n    const params = this.createBaseParams(endpointConfig);\n\n    params.timestamp = Math.floor(new Date().getTime() / 1000);\n\n    if (channel) {\n      params.channel = channel;\n    }\n\n    if (channelGroup) {\n      params['channel-group'] = channelGroup;\n    }\n\n    if (authKeys.length > 0) {\n      params.auth = authKeys.join(',');\n    }\n\n    let signInput = this.config.subscribeKey + '\\n' + this.config.publishKey + '\\naudit\\n';\n    signInput += utils._get_pam_sign_input_from_params(params);\n\n    params.signature = this.crypto.HMACSHA256(signInput);\n\n    this.networking.GET(params, endpointConfig, (status: statusStruct, payload: Object) => {\n      if (status.error) return callback(status);\n\n      const response: auditResponse = {\n\n      };\n\n      callback(status, response);\n    });\n  }\n\n}\n"],"sourceRoot":"/source/"}