{"version":3,"sources":["core/endpoints/presence/get_state.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","PNGetStateOperation","modules","config","subscribeKey","incomingParams","uuid","UUID","channels","stringifiedChannels","length","join","encodeString","getTransactionTimeout","channelGroups","params","serverResponse","channelsResponse","payload"],"mappings":";;;;;QAMgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAMAC,M,GAAAA,M;QAOAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAWAC,c,GAAAA,c;;AAxChB;;AACA;;;;AACA;;;;;;AAEO,SAASN,YAAT,GAAgC;AACrC,SAAO,qBAAmBO,mBAA1B;AACD;;AAEM,SAASN,cAAT,CAAwBO,OAAxB,EAAgD;AAAA,MAC/CC,MAD+C,GACpCD,OADoC,CAC/CC,MAD+C;;;AAGrD,MAAI,CAACA,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASR,MAAT,CAAgBM,OAAhB,EAAwCG,cAAxC,EAAmF;AAAA,MAClFF,MADkF,GACvED,OADuE,CAClFC,MADkF;AAAA,6BAE5CE,cAF4C,CAElFC,IAFkF;AAAA,MAElFA,IAFkF,wCAE3EH,OAAOI,IAFoE;AAAA,8BAE5CF,cAF4C,CAE9DG,QAF8D;AAAA,MAE9DA,QAF8D,yCAEnD,EAFmD;;AAGxF,MAAIC,sBAAsBD,SAASE,MAAT,GAAkB,CAAlB,GAAsBF,SAASG,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAArE;AACA,mCAA+BR,OAAOC,YAAtC,iBAA8D,gBAAMQ,YAAN,CAAmBH,mBAAnB,CAA9D,cAA8GH,IAA9G;AACD;;AAEM,SAAST,iBAAT,OAA8D;AAAA,MAAjCM,MAAiC,QAAjCA,MAAiC;;AACnE,SAAOA,OAAOU,qBAAP,EAAP;AACD;;AAEM,SAASf,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBG,OAAvB,EAA+CG,cAA/C,EAA0F;AAAA,+BAClEA,cADkE,CACzFS,aADyF;AAAA,MACzFA,aADyF,0CACzE,EADyE;;AAE/F,MAAMC,SAAS,EAAf;;AAEA,MAAID,cAAcJ,MAAd,GAAuB,CAA3B,EAA8B;AAC5BK,WAAO,eAAP,IAA0BD,cAAcH,IAAd,CAAmB,GAAnB,CAA1B;AACD;;AAED,SAAOI,MAAP;AACD;;AAEM,SAASf,cAAT,CAAwBE,OAAxB,EAAgDc,cAAhD,EAAwEX,cAAxE,EAA6H;AAAA,+BACtFA,cADsF,CAC5HG,QAD4H;AAAA,MAC5HA,QAD4H,0CACjH,EADiH;AAAA,+BACtFH,cADsF,CAC7GS,aAD6G;AAAA,MAC7GA,aAD6G,0CAC7F,EAD6F;;AAElI,MAAIG,mBAAmB,EAAvB;;AAEA,MAAIT,SAASE,MAAT,KAAoB,CAApB,IAAyBI,cAAcJ,MAAd,KAAyB,CAAtD,EAAyD;AACvDO,qBAAiBT,SAAS,CAAT,CAAjB,IAAgCQ,eAAeE,OAA/C;AACD,GAFD,MAEO;AACLD,uBAAmBD,eAAeE,OAAlC;AACD;;AAED,SAAO,EAAEV,UAAUS,gBAAZ,EAAP;AACD","file":"get_state.js","sourcesContent":["/* @flow */\n\nimport { GetStateArguments, GetStateResponse, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNGetStateOperation;\n}\n\nexport function validateParams(modules: ModulesInject) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: GetStateArguments): string {\n  let { config } = modules;\n  let { uuid = config.UUID, channels = [] } = incomingParams;\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v2/presence/sub-key/${config.subscribeKey}/channel/${utils.encodeString(stringifiedChannels)}/uuid/${uuid}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: GetStateArguments): Object {\n  let { channelGroups = [] } = incomingParams;\n  const params = {};\n\n  if (channelGroups.length > 0) {\n    params['channel-group'] = channelGroups.join(',');\n  }\n\n  return params;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object, incomingParams: GetStateArguments): GetStateResponse {\n  let { channels = [], channelGroups = [] } = incomingParams;\n  let channelsResponse = {};\n\n  if (channels.length === 1 && channelGroups.length === 0) {\n    channelsResponse[channels[0]] = serverResponse.payload;\n  } else {\n    channelsResponse = serverResponse.payload;\n  }\n\n  return { channels: channelsResponse };\n}\n"]}