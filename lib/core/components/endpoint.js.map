{"version":3,"sources":["core/components/endpoint.js"],"names":["modules","endpoint","networking","config","crypto","callback","incomingParams","getOperation","validationResult","validateParams","createValidationError","outgoingParams","prepareParams","uuid","UUID","pnsdk","generatePNSDK","useInstanceId","instanceid","instanceId","useRequestId","requestid","v4","isAuthSupported","getAuthKey","auth","signInput","subscribeKey","publishKey","signPamFromParams","signature","HMACSHA256","onResponse","status","payload","error","handleResponse","callInstance","usePost","url","postURL","networkingParams","operation","timeout","getRequestTimeout","postPayload","POST","getURL","GET","createError","errorPayload","type","message","base","sdkFamily","partnerId","getVersion"],"mappings":"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","file":"core/components/endpoint.js","sourcesContent":["import { StatusAnnouncement } from '../flow_interfaces';\nimport uuidGenerator from 'uuid';\nimport utils from '../utils';\nimport Config from './config';\n\nfunction createError(errorPayload: Object, type: string): Object {\n  errorPayload.type = type;\n  return errorPayload;\n}\n\nfunction createValidationError(message: string): Object {\n  return createError({ message }, 'validationError');\n}\n\nfunction generatePNSDK(config: Config): string {\n  let base = 'PubNub-JS-' + config.sdkFamily;\n\n  if (config.partnerId) {\n    base += '-' + config.partnerId;\n  }\n\n  base += '/' + config.getVersion();\n\n  return base;\n}\n\nexport default function (modules, endpoint, ...args) {\n  let { networking, config, crypto } = modules;\n  let callback = null;\n  let incomingParams = {};\n\n  if (endpoint.getOperation() === 'PNTimeOperation' || endpoint.getOperation() === 'PNChannelGroupsOperation') {\n    callback = args[0];\n  } else {\n    incomingParams = args[0];\n    callback = args[1];\n  }\n\n  let validationResult = endpoint.validateParams(modules, incomingParams);\n\n  if (validationResult) {\n    callback(createValidationError(validationResult));\n    return;\n  }\n\n  let outgoingParams = endpoint.prepareParams(modules, incomingParams);\n\n  outgoingParams.uuid = config.UUID;\n  outgoingParams.pnsdk = generatePNSDK(config);\n\n  if (config.useInstanceId) {\n    outgoingParams.instanceid = config.instanceId;\n  }\n\n  if (config.useRequestId) {\n    outgoingParams.requestid = uuidGenerator.v4();\n  }\n\n  if (endpoint.isAuthSupported() && config.getAuthKey()) {\n    outgoingParams.auth = config.getAuthKey();\n  }\n\n  // encrypt the params\n  if (endpoint.getOperation() === 'PNAccessManagerGrant') {\n    let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\ngrant\\n';\n    signInput += utils.signPamFromParams(outgoingParams);\n    outgoingParams.signature = crypto.HMACSHA256(signInput);\n  }\n\n  if (endpoint.getOperation() === 'PNAccessManagerAudit') {\n    let signInput = config.subscribeKey + '\\n' + config.publishKey + '\\naudit\\n';\n    signInput += utils.signPamFromParams(outgoingParams);\n    outgoingParams.signature = crypto.HMACSHA256(signInput);\n  }\n\n  let onResponse = (status: StatusAnnouncement, payload: Object) => {\n    if (callback) {\n      if (status.error) return callback(status);\n\n      callback(status, endpoint.handleResponse(modules, payload, incomingParams));\n    }\n  };\n\n  let callInstance;\n\n  if (endpoint.usePost && endpoint.usePost(modules, incomingParams)) {\n    let url = endpoint.postURL(modules, incomingParams);\n    let networkingParams = { url,\n      operation: endpoint.getOperation(),\n      timeout: endpoint.getRequestTimeout(modules)\n    };\n    let payload = endpoint.postPayload(modules, incomingParams);\n    callInstance = networking.POST(outgoingParams, payload, networkingParams, onResponse);\n  } else {\n    let url = endpoint.getURL(modules, incomingParams);\n    let networkingParams = { url,\n      operation: endpoint.getOperation(),\n      timeout: endpoint.getRequestTimeout(modules)\n    };\n    callInstance = networking.GET(outgoingParams, networkingParams, onResponse);\n  }\n\n  if (endpoint.getOperation() === 'PNSubscribeOperation') {\n    return callInstance;\n  }\n}\n"],"sourceRoot":"/source/"}