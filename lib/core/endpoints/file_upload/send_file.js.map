{"version":3,"sources":["core/endpoints/file_upload/send_file.js"],"names":["sendFile","generateUploadUrl","publishFile","modules","PubNubFile","config","cryptography","networking","channel","input","file","message","cipherKey","meta","ttl","store","PubNubError","create","name","file_upload_request","url","formFields","form_fields","data","id","encryptFile","formFieldsWithMimeType","mimeType","map","entry","key","value","Blob","toFile","FILE","result","toBuffer","status","retries","wasSuccessful","fileId","fileName","deps","f","params","cb","resultP","then","error"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { PubNubError, createValidationError } from '../../components/endpoint';\nimport type {\n  SendFileParams,\n  SendFileResult,\n  GenerateUploadUrlParams,\n  GenerateUploadUrlResult,\n  PublishFileParams,\n  PublishFileResult,\n} from './types';\n\nimport type { Modules } from '../endpoint';\n\ntype Dependencies = {|\n  generateUploadUrl: (params: GenerateUploadUrlParams) => Promise<GenerateUploadUrlResult>,\n  publishFile: (params: PublishFileParams) => Promise<PublishFileResult>,\n  modules: Modules,\n|};\n\nconst sendFile = ({\n  generateUploadUrl,\n  publishFile,\n  modules: { PubNubFile, config, cryptography, networking },\n}: Dependencies) => async ({\n  channel,\n  file: input,\n  message,\n  cipherKey,\n  meta,\n  ttl,\n  store,\n}: SendFileParams): Promise<SendFileResult> => {\n  if (!channel) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"channel can't be empty\")\n    );\n  }\n\n  if (!input) {\n    throw new PubNubError('Validation failed, check status for details', createValidationError(\"file can't be empty\"));\n  }\n\n  let file = PubNubFile.create(input);\n\n  const {\n    file_upload_request: { url, form_fields: formFields },\n    data: { id, name },\n  } = await generateUploadUrl({ channel, name: file.name });\n\n  if (cipherKey ?? config.cipherKey) {\n    file = await cryptography.encryptFile(cipherKey ?? config.cipherKey, file, PubNubFile);\n  }\n\n  let formFieldsWithMimeType = formFields;\n\n  if (file.mimeType) {\n    formFieldsWithMimeType = formFields.map((entry) => {\n      if (entry.key === 'Content-Type') return { key: entry.key, value: file.mimeType ?? '' };\n      else return entry;\n    });\n  }\n\n  let result;\n\n  try {\n    if (typeof Blob !== 'undefined') {\n      result = await networking.FILE(url, formFieldsWithMimeType, await file.toFile());\n    } else {\n      result = await networking.FILE(url, formFieldsWithMimeType, await file.toBuffer());\n    }\n  } catch (e) {\n    throw new PubNubError('Upload to bucket failed', e);\n  }\n\n  if (result.status !== 204) {\n    throw new PubNubError('Upload to bucket was unsuccessful', result);\n  }\n\n  let retries = 5;\n  let wasSuccessful = false;\n\n  while (!wasSuccessful && retries > 0) {\n    try {\n      await publishFile({\n        channel,\n        message,\n        fileId: id,\n        fileName: name,\n        meta,\n        store,\n        ttl,\n      });\n\n      wasSuccessful = true;\n    } catch (e) {\n      retries -= 1;\n    }\n  }\n  if (!wasSuccessful) {\n    throw new PubNubError('Publish failed. You may want to execute that operation manually using pubnub.publishFile', {\n      channel,\n      id,\n      name,\n    });\n  } else {\n    return {\n      id,\n      name,\n    };\n  }\n};\n\nexport default (deps: Dependencies) => {\n  const f = sendFile(deps);\n\n  return (params: SendFileParams, cb?: (error: any, params: SendFileResult) => void): Promise<SendFileResult> => {\n    const resultP = f(params);\n\n    if (typeof cb === 'function') {\n      resultP.then((result) => cb(null, result)).catch((error) => cb(error, (null: any)));\n\n      return resultP;\n    } else {\n      return resultP;\n    }\n  };\n};\n"],"file":"send_file.js"}